@model AspnetCoreMvcFull.ViewModels.CraneUsage.CraneUsageMinuteVisualizationViewModel

@{
  ViewData["Title"] = "Visualisasi Detail Penggunaan Crane";
  Layout = "_ContentNavbarLayout";
}

@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
  <style>
    .minute-chart-container {
      position: relative;
      height: 550px;
    }

    .legend-item {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
    }

    .legend-color {
      width: 18px;
      height: 18px;
      margin-right: 8px;
      border-radius: 3px;
    }

    .detail-segment {
      border-left: 3px solid #696cff;
      padding-left: 12px;
      margin-bottom: 12px;
    }

    .detail-category {
      font-weight: bold;
      margin-bottom: 5px;
    }

    .detail-time {
      font-size: 1.1rem;
      font-weight: bold;
      margin-bottom: 5px;
    }

    .detail-info {
      margin-bottom: 0;
      color: #6c757d;
    }
  </style>
}

@section VendorScripts {
  <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
}

@if (ViewBag.SuccessMessage != null)
{
  <div class="alert alert-success alert-dismissible fade show" role="alert">
    @ViewBag.SuccessMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}
@if (ViewBag.ErrorMessage != null)
{
  <div class="alert alert-danger alert-dismissible fade show" role="alert">
    @ViewBag.ErrorMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}

@* <h1>Visualisasi Detail Penggunaan Crane</h1>
<p class="lead">Visualisasi penggunaan crane hingga level menit</p> *@

<div class="card mb-4">
  <div class="card-header">
    <i class="bx bx-filter me-1"></i>
    Filter
  </div>
  <div class="card-body">
    <form asp-action="MinuteVisualization" method="get" id="filterForm">
      <div class="row g-3">
        <div class="col-md-4">
          <label asp-for="CraneId" class="form-label">Crane</label>
          <select asp-for="CraneId" asp-items="Model.CraneList" class="form-select" required>
            <option value="">-- Pilih Crane --</option>
          </select>
        </div>
        <div class="col-md-4">
          <label asp-for="Date" class="form-label">Tanggal</label>
          <input asp-for="Date" class="form-control" type="date" required />
        </div>
        <div class="col-md-4 d-flex align-items-end">
          <button type="submit" class="btn btn-primary">
            <i class="bx bx-search me-1"></i> Tampilkan
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <i class="bx bx-bar-chart-alt me-1"></i>
          Penggunaan Crane <strong>@Model.CraneName</strong> pada <strong>@Model.Date.ToString("dd MMMM yyyy")</strong>
        </h5>
      </div>
      <div class="card-body">
        <div class="minute-chart-container">
          <div id="minuteVisualizationChart"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card mb-4">
      <div class="card-header">
        <i class="bx bx-info-circle me-1"></i>
        Detail Aktivitas
      </div>
      <div class="card-body">
        <div id="activityDetail">
          <p class="text-center text-muted">Klik pada segmen di chart untuk melihat detailnya</p>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">
        <i class="bx bx-palette me-1"></i>
        Legenda
      </div>
      <div class="card-body">
        <div class="legend-container">
          <div class="legend-item">
            <div class="legend-color" style="background-color: #28a745;"></div>
            <div>Operating</div>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background-color: #ffc107;"></div>
            <div>Delay</div>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background-color: #6c757d;"></div>
            <div>Standby</div>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background-color: #17a2b8;"></div>
            <div>Service</div>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background-color: #dc3545;"></div>
            <div>Breakdown</div>
          </div>
        </div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">
        <i class="bx bx-pie-chart-alt me-1"></i>
        Ringkasan
      </div>
      <div class="card-body">
        <h5>Jam Penggunaan</h5>
        <div class="progress mb-3" style="height: 25px;">
          <div class="progress-bar bg-success" role="progressbar" style="width: @Model.Summary.OperatingPercentage%;"
            title="Operating: @Model.Summary.OperatingHours.ToString("0.0") jam">
            @Model.Summary.OperatingHours.ToString("0.0")
          </div>
          <div class="progress-bar bg-warning" role="progressbar" style="width: @Model.Summary.DelayPercentage%;"
            title="Delay: @Model.Summary.DelayHours.ToString("0.0") jam">
            @Model.Summary.DelayHours.ToString("0.0")
          </div>
          <div class="progress-bar bg-secondary" role="progressbar" style="width: @Model.Summary.StandbyPercentage%;"
            title="Standby: @Model.Summary.StandbyHours.ToString("0.0") jam">
            @Model.Summary.StandbyHours.ToString("0.0")
          </div>
          <div class="progress-bar bg-info" role="progressbar" style="width: @Model.Summary.ServicePercentage%;"
            title="Service: @Model.Summary.ServiceHours.ToString("0.0") jam">
            @Model.Summary.ServiceHours.ToString("0.0")
          </div>
          <div class="progress-bar bg-danger" role="progressbar" style="width: @Model.Summary.BreakdownPercentage%;"
            title="Breakdown: @Model.Summary.BreakdownHours.ToString("0.0") jam">
            @Model.Summary.BreakdownHours.ToString("0.0")
          </div>
        </div>

        <table class="table table-sm">
          <tr>
            <td>Operating</td>
            <td>@Model.Summary.OperatingHours.ToString("0.0") jam</td>
            <td>@Model.Summary.OperatingPercentage.ToString("0.0")%</td>
          </tr>
          <tr>
            <td>Delay</td>
            <td>@Model.Summary.DelayHours.ToString("0.0") jam</td>
            <td>@Model.Summary.DelayPercentage.ToString("0.0")%</td>
          </tr>
          <tr>
            <td>Standby</td>
            <td>@Model.Summary.StandbyHours.ToString("0.0") jam</td>
            <td>@Model.Summary.StandbyPercentage.ToString("0.0")%</td>
          </tr>
          <tr>
            <td>Service</td>
            <td>@Model.Summary.ServiceHours.ToString("0.0") jam</td>
            <td>@Model.Summary.ServicePercentage.ToString("0.0")%</td>
          </tr>
          <tr>
            <td>Breakdown</td>
            <td>@Model.Summary.BreakdownHours.ToString("0.0") jam</td>
            <td>@Model.Summary.BreakdownPercentage.ToString("0.0")%</td>
          </tr>
          <tr class="table-active">
            <th>Available Time</th>
            <th>@Model.Summary.AvailableHours.ToString("0.0") jam</th>
            <th>@Model.Summary.AvailablePercentage.ToString("0.0")%</th>
          </tr>
          <tr class="table-active">
            <th>Maintenance Time</th>
            <th>@Model.Summary.MaintenanceHours.ToString("0.0") jam</th>
            <th>@Model.Summary.MaintenancePercentage.ToString("0.0")%</th>
          </tr>
        </table>
      </div>
    </div>
  </div>
</div>

<div class="d-flex justify-content-between mb-4">
  <a asp-action="Index" class="btn btn-secondary">
    <i class="bx bx-arrow-left me-1"></i> Kembali ke Daftar
  </a>
  <a asp-action="Visualization" class="btn btn-info me-2">
    <i class="bx bx-bar-chart me-1"></i> Visualisasi Per Jam
  </a>
  <a asp-action="Form" asp-route-craneId="@Model.CraneId" asp-route-date="@Model.Date.ToString("yyyy-MM-dd")"
    class="btn btn-success">
    <i class="bx bx-plus me-1"></i> Tambah Penggunaan Baru
  </a>
</div>

@section PageScripts {
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Prepare data for the chart
      const minuteData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.MinuteData));

      // Check if we have data
      if (!minuteData || minuteData.length === 0) {
        document.getElementById('minuteVisualizationChart').innerHTML = '<div class="text-center py-5"><p>No data available for this date</p></div>';
        return;
      }

      // Helper function to get color for category
      function getCategoryColor(category) {
        const categoryColors = {
          'Operating': '#28a745',
          'Delay': '#ffc107',
          'Standby': '#6c757d',
          'Service': '#17a2b8',
          'Breakdown': '#dc3545'
        };
        return categoryColors[category] || '#6c757d';
      }

      // COMPLETELY REVISED: Transform data for ApexCharts - single series with vertical hours
      function transformDataForChart(data) {
        // Create a single series with all activities
        const series = [{
          name: 'Activities',
          data: []
        }];

        // Process each data point
        data.forEach((item, index) => {
          if (!item) return; // Skip null/undefined items

          // Use correct property casing (PascalCase from C# model)
          const category = item.Category || 'Standby';
          const startTime = new Date(item.StartTime);
          const endTime = new Date(item.EndTime);

          // Convert to hours for Y-axis
          if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
            console.warn('Invalid date found:', item);
            return;
          }

          const startHours = startTime.getHours() + (startTime.getMinutes() / 60);
          const endHours = endTime.getHours() + (endTime.getMinutes() / 60);

          // Create data point with category color
          const dataPoint = {
            x: 'Timeline', // Single bar on x-axis
            y: [startHours, endHours],
            fillColor: getCategoryColor(category),
            category: category,
            dataIndex: index
          };

          series[0].data.push(dataPoint);
        });

        return { series: series };
      }

      // Get chart data
      const chartData = transformDataForChart(minuteData);

      // Make sure we have valid series data
      if (!chartData.series || chartData.series.length === 0 || !chartData.series[0].data.length) {
        document.getElementById('minuteVisualizationChart').innerHTML = '<div class="text-center py-5"><p>Could not process data for visualization</p></div>';
        return;
      }

      // Configure the ApexCharts options
      let options = {
        series: chartData.series,
        chart: {
          type: 'rangeBar',
          height: 500,
          toolbar: {
            show: true
          },
          zoom: {
            enabled: true
          },
          animations: {
            enabled: false
          },
          events: {
            dataPointSelection: function (event, chartContext, config) {
              if (config.dataPointIndex >= 0) {
                const dataIndex = chartData.series[0].data[config.dataPointIndex].dataIndex;
                if (dataIndex !== undefined && minuteData[dataIndex]) {
                  displayActivityDetails(minuteData[dataIndex]);
                }
              }
            }
          }
        },
        plotOptions: {
          bar: {
            horizontal: false, // CHANGED: Vertical bar (hours on Y-axis)
            barHeight: '100%',
            rangeBarOverlap: true,
            distributed: false
          }
        },
        dataLabels: {
          enabled: false
        },
        tooltip: {
          custom: function ({ seriesIndex, dataPointIndex, w }) {
            const data = w.config.series[seriesIndex].data[dataPointIndex];
            if (!data || data.dataIndex === undefined || !minuteData[data.dataIndex]) {
              return '<div class="custom-tooltip">No details available</div>';
            }

            const item = minuteData[data.dataIndex];
            // Use correct property casing (PascalCase)
            const startTime = formatTime(item.StartTime);
            const endTime = formatTime(item.EndTime);
            const durationMinutes = item.DurationMinutes;
            const hours = Math.floor(durationMinutes / 60);
            const minutes = durationMinutes % 60;
            const durationText = hours > 0
              ? `${hours} jam ${minutes} menit`
              : `${minutes} menit`;

            return `<div class="custom-tooltip">
                         <div><strong>${item.Category}</strong> - ${item.SubcategoryName}</div>
                         <div>${startTime} - ${endTime} (${durationText})</div>
                         ${item.OperatorName ? `<div>Operator: ${item.OperatorName}</div>` : ''}
                         ${item.BookingNumber ? `<div>Booking: ${item.BookingNumber}</div>` : ''}
                       </div>`;
          }
        },
        fill: {
          type: 'solid',
          opacity: 0.9
        },
        xaxis: {
          type: 'category',
          categories: ['Timeline'], // CHANGED: Single category on X-axis
          axisBorder: {
            show: true
          },
          axisTicks: {
            show: true
          }
        },
        yaxis: {
          min: 0,
          max: 24,
          tickAmount: 24,
          labels: {
            formatter: function (value) {
              return formatHour(value);
            }
          },
          title: {
            text: 'Jam'
          },
          reversed: false // Bottom to top: 0 hours at the bottom, 24 at the top
        },
        title: {
          text: `Detail Penggunaan Crane per Menit`,
          align: 'center',
          style: {
            fontSize: '16px'
          }
        },
        grid: {
          show: true,
          yaxis: {
            lines: {
              show: true
            }
          }
        },
        legend: {
          show: false // Hide legend since colors are per item
        }
      };

      try {
        // Create and render the chart
        const chart = new ApexCharts(document.querySelector("#minuteVisualizationChart"), options);
        chart.render();

        // Initialize with the first segment if exists
        if (minuteData.length > 0) {
          displayActivityDetails(minuteData[0]);
        }
      } catch (error) {
        console.error("Chart rendering error:", error);
        document.getElementById('minuteVisualizationChart').innerHTML =
          `<div class="text-center py-5">
                <p>Error rendering chart: ${error.message}</p>
                <p>Please try refreshing the page or contact support.</p>
              </div>`;
      }

      function displayActivityDetails(activity) {
        if (!activity) {
          document.getElementById('activityDetail').innerHTML =
            '<p class="text-center text-muted">No activity details available</p>';
          return;
        }

        // Use correct property casing (PascalCase)
        const startTime = formatTime(activity.StartTime);
        const endTime = formatTime(activity.EndTime);
        const durationMinutes = activity.DurationMinutes;
        const hours = Math.floor(durationMinutes / 60);
        const minutes = durationMinutes % 60;
        const durationText = hours > 0
          ? `${hours} jam ${minutes} menit`
          : `${minutes} menit`;

        // Get color for category
        const color = getCategoryColor(activity.Category);

        let detailHtml = `
              <div class="detail-segment">
                <div class="detail-time">${startTime} - ${endTime}</div>
                <span class="badge mb-2" style="background-color: ${color}">${activity.Category}</span>
                <div class="detail-category">${activity.SubcategoryName}</div>
                <div class="detail-duration mb-3">Durasi: ${durationText}</div>
            `;

        // Use correct property casing (PascalCase)
        if (activity.OperatorName) {
          detailHtml += `<div class="detail-info"><strong>Operator:</strong> ${activity.OperatorName}</div>`;
        }

        if (activity.BookingNumber) {
          detailHtml += `<div class="detail-info"><strong>Booking:</strong> ${activity.BookingNumber}</div>`;
        }

        if (activity.MaintenanceTitle) {
          detailHtml += `<div class="detail-info"><strong>Maintenance:</strong> ${activity.MaintenanceTitle}</div>`;
        }

        if (activity.Notes) {
          detailHtml += `<div class="detail-info"><strong>Catatan:</strong> ${activity.Notes}</div>`;
        }

        detailHtml += `</div>`;

        document.getElementById('activityDetail').innerHTML = detailHtml;
      }

      function formatTime(timeString) {
        try {
          const date = new Date(timeString);
          if (isNaN(date.getTime())) {
            return 'Invalid Time';
          }
          return date.toLocaleTimeString('id-ID', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
          });
        } catch (error) {
          console.error("Error formatting time:", error, timeString);
          return 'Error';
        }
      }

      function formatHour(hour) {
        return hour.toString().padStart(2, '0') + ':00';
      }
    });
  </script>
}
