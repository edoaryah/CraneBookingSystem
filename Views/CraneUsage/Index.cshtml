<!-- Views/CraneUsage/Index.cshtml -->
@model AspnetCoreMvcFull.Controllers.CraneUsageIndexViewModel
@{
  ViewData["Title"] = "Crane Usage";
  Layout = "_ContentNavbarLayout";
}

@section PageStyles
{
  <style>
    .form-section {
      margin-bottom: 2rem;
    }

    .form-section-title {
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #ddd;
    }

    .card-usage-detail {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .card-usage-detail .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    .progress {
      height: 20px;
    }

    .usage-stat-value {
      font-size: 1.5rem;
      font-weight: 600;
    }

    .usage-stat-label {
      font-size: 0.875rem;
      color: #697a8d;
    }

    .usage-record-row:hover {
      background-color: rgba(105, 108, 255, 0.08);
    }

    .badge.operating {
      background-color: #696cff !important;
    }

    .badge.delay {
      background-color: #ffab00 !important;
    }

    .badge.standby {
      background-color: #03c3ec !important;
    }

    .badge.service {
      background-color: #71dd37 !important;
    }

    .badge.breakdown {
      background-color: #ff3e1d !important;
    }

    .category-dropdown {
      width: 100%;
    }

    .duration-input {
      max-width: 100px;
    }

    #usageRecordsTable th,
    #usageRecordsTable td {
      vertical-align: middle;
    }
  </style>
}

<div class="row">
  <div class="col-12">
    <div class="card mb-4">
      <div class="card-header d-flex justify-content-between align-items-center">
        <div>
          <h5 class="mb-0">Crane Usage</h5>
          @if (Model.Booking != null)
          {
            <span class="text-muted">@Model.Booking.BookingNumber</span>
          }
        </div>
      </div>

      <div class="card-body">
        @if (Model.Booking == null || Model.UsageSummary == null)
        {
          <div class="alert alert-danger">
            Failed to load crane usage data. Please try again or go back to details.
          </div>
        }
        else
        {
          <!-- Booking Info Summary -->
          <div class="form-section">
            <h6 class="form-section-title">Booking Information</h6>
            <div class="row">
              <div class="col-md-3 mb-3">
                <label class="form-label">Booking Number</label>
                <p class="font-weight-bold mb-0">@Model.Booking.BookingNumber</p>
              </div>
              <div class="col-md-3 mb-3">
                <label class="form-label">Name</label>
                <p class="mb-0">@Model.Booking.Name</p>
              </div>
              <div class="col-md-3 mb-3">
                <label class="form-label">Department</label>
                <p class="mb-0">@Model.Booking.Department</p>
              </div>
              <div class="col-md-3 mb-3">
                <label class="form-label">Crane</label>
                <p class="mb-0">@Model.Booking.CraneCode</p>
              </div>
            </div>
            <div class="row">
              <div class="col-md-3 mb-3">
                <label class="form-label">Date Range</label>
                <p class="mb-0">@Model.Booking.StartDate.ToShortDateString() - @Model.Booking.EndDate.ToShortDateString()
                </p>
              </div>
              <div class="col-md-3 mb-3">
                <label class="form-label">Location</label>
                <p class="mb-0">@(Model.Booking.Location ?? "-")</p>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label">Description</label>
                <p class="mb-0">@(Model.Booking.Description ?? "-")</p>
              </div>
            </div>
          </div>

          <!-- Usage Summary Statistics -->
          <div class="form-section">
            <h6 class="form-section-title">Usage Summary</h6>

            <!-- KPI Cards -->
            <div class="row mb-4">
              <div class="col-md-4 col-sm-6 mb-3">
                <div class="card card-usage-detail h-100">
                  <div class="card-body p-3">
                    <h6 class="card-title">Availability</h6>
                    <div class="d-flex align-items-center mb-2">
                      <span
                        class="usage-stat-value me-2">@Model.UsageSummary.AvailabilityPercentage.ToString("0.00")%</span>
                      <span class="usage-stat-label">(Available Hours / Total Hours)</span>
                    </div>
                    <div class="progress">
                      <div class="progress-bar" role="progressbar"
                        style="width: @Model.UsageSummary.AvailabilityPercentage%"
                        aria-valuenow="@Model.UsageSummary.AvailabilityPercentage" aria-valuemin="0" aria-valuemax="100">
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-4 col-sm-6 mb-3">
                <div class="card card-usage-detail h-100">
                  <div class="card-body p-3">
                    <h6 class="card-title">Utilisation</h6>
                    <div class="d-flex align-items-center mb-2">
                      <span
                        class="usage-stat-value me-2">@Model.UsageSummary.UtilisationPercentage.ToString("0.00")%</span>
                      <span class="usage-stat-label">(Usage Hours / Available Hours)</span>
                    </div>
                    <div class="progress">
                      <div class="progress-bar" role="progressbar"
                        style="width: @Model.UsageSummary.UtilisationPercentage%"
                        aria-valuenow="@Model.UsageSummary.UtilisationPercentage" aria-valuemin="0" aria-valuemax="100">
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="col-md-4 col-sm-12 mb-3">
                <div class="card card-usage-detail h-100">
                  <div class="card-body p-3">
                    <h6 class="card-title">Total Hours</h6>
                    <div class="row text-center">
                      <div class="col">
                        <div class="usage-stat-value" id="operatingHours">
                          @FormatTimeSpan(Model.UsageSummary.TotalOperatingTime)
                        </div>
                        <div class="usage-stat-label">Operating</div>
                      </div>
                      <div class="col">
                        <div class="usage-stat-value" id="delayHours">
                          @FormatTimeSpan(Model.UsageSummary.TotalDelayTime)
                        </div>
                        <div class="usage-stat-label">Delay</div>
                      </div>
                      <div class="col">
                        <div class="usage-stat-value" id="standbyHours">
                          @FormatTimeSpan(Model.UsageSummary.TotalStandbyTime)
                        </div>
                        <div class="usage-stat-label">Standby</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Category Hours Bar Chart -->
            <div class="row mb-4">
              <div class="col-12">
                <div class="card card-usage-detail">
                  <div class="card-header d-flex justify-content-between align-items-center py-3">
                    <h6 class="mb-0">Hours by Category</h6>
                  </div>
                  <div class="card-body">
                    <div class="chart-container" style="height: 180px;">
                      <canvas id="hoursChart"></canvas>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Usage Records Table with Add New Record Form -->
          <div class="form-section">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h6 class="form-section-title mb-0">Usage Records</h6>
              <button id="addRecordBtn" type="button" class="btn btn-primary btn-sm">
                <i class="bx bx-plus me-1"></i> Add Record
              </button>
            </div>

            <!-- Add New Record Form (hidden by default) -->
            <div id="addRecordForm" class="card card-usage-detail mb-4" style="display: none;">
              <div class="card-header d-flex justify-content-between align-items-center py-3">
                <h6 class="mb-0">New Usage Record</h6>
                <button id="closeFormBtn" type="button" class="btn-close" aria-label="Close"></button>
              </div>
              <div class="card-body">
                <form id="usageRecordForm" asp-action="CreateRecord" method="post">
                  @Html.AntiForgeryToken()
                  <input type="hidden" name="BookingId" value="@Model.Booking.Id" />
                  <input type="hidden" name="documentNumber" value="@Model.Booking.DocumentNumber" />
                  <div class="row g-3 mb-3">
                    <div class="col-md-3">
                      <label for="Date" class="form-label">Date</label>
                      <input type="date" class="form-control" id="Date" name="Date" required
                        min="@Model.Booking.StartDate.ToString("yyyy-MM-dd")"
                        max="@Model.Booking.EndDate.ToString("yyyy-MM-dd")">
                    </div>
                    <div class="col-md-3">
                      <label for="Category" class="form-label">Category</label>
                      <select class="form-select category-dropdown" id="Category" name="Category" required>
                        <option value="">Select category</option>
                        <option value="0">Operating</option>
                        <option value="1">Delay</option>
                        <option value="2">Standby</option>
                        <option value="3">Service</option>
                        <option value="4">Breakdown</option>
                      </select>
                    </div>
                    <div class="col-md-3">
                      <label for="SubcategoryId" class="form-label">Subcategory</label>
                      <select class="form-select" id="SubcategoryId" name="SubcategoryId" required>
                        <option value="">Select category first</option>
                      </select>
                    </div>
                    <div class="col-md-3">
                      <label for="StartTime" class="form-label">Start Time (HH:MM)</label>
                      <input type="time" class="form-control" id="StartTime" name="StartTime" required>
                    </div>
                    <div class="col-md-3 mt-3">
                      <label for="EndTime" class="form-label">End Time (HH:MM)</label>
                      <input type="time" class="form-control" id="EndTime" name="EndTime" required>
                    </div>
                    <div class="col-md-3 mt-3">
                      <label for="calculatedDuration" class="form-label">Duration (Calculated)</label>
                      <input type="text" class="form-control" id="calculatedDuration" readonly placeholder="00:00">
                    </div>
                  </div>
                  <div class="row">
                    <div class="col-12 text-end">
                      <button type="button" id="cancelAddBtn" class="btn btn-outline-secondary me-2">Cancel</button>
                      <button type="submit" id="saveRecordBtn" class="btn btn-primary">Save Record</button>
                    </div>
                  </div>
                </form>
              </div>
            </div>

            <!-- Usage Records Table -->
            @if (Model.UsageSummary.UsageRecords.Any())
            {
              <div class="card card-usage-detail">
                <div class="table-responsive text-nowrap">
                  <table class="table" id="usageRecordsTable">
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Category</th>
                        <th>Subcategory</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Duration</th>
                        <th class="text-end">Actions</th>
                      </tr>
                    </thead>
                    <tbody id="usageRecordsBody">
                      @foreach (var record in Model.UsageSummary.UsageRecords.OrderByDescending(r => r.Date))
                      {
                        <tr class="usage-record-row">
                          <td>@record.Date.ToShortDateString()</td>
                          <td>
                            <span class="badge @record.CategoryName.ToLower()">@record.CategoryName</span>
                          </td>
                          <td>@record.SubcategoryName</td>
                          <td>@record.StartTimeFormatted</td>
                          <td>@record.EndTimeFormatted</td>
                          <td>@record.DurationFormatted</td>
                          <td class="text-end">
                            <div class="dropdown">
                              <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                <i class="bx bx-dots-vertical-rounded"></i>
                              </button>
                              <div class="dropdown-menu">
                                <a class="dropdown-item edit-record" href="javascript:void(0);" data-record-id="@record.Id"
                                  data-category="@((int)record.Category)" data-subcategory="@record.SubcategoryId"
                                  data-start-time="@record.StartTimeFormatted" data-end-time="@record.EndTimeFormatted">
                                  <i class="bx bx-edit-alt me-1"></i> Edit
                                </a>
                                <a class="dropdown-item delete-record" href="javascript:void(0);" data-record-id="@record.Id">
                                  <i class="bx bx-trash me-1"></i> Delete
                                </a>
                              </div>
                            </div>
                          </td>
                        </tr>
                      }
                    </tbody>
                  </table>
                </div>
              </div>
            }
            else
            {
              <!-- No records message -->
              <div id="noRecordsMessage" class="text-center py-4">
                <i class="bx bx-time text-secondary mb-2" style="font-size: 3rem;"></i>
                <p class="mb-0">No usage records found for this booking</p>
                <p class="text-muted">Click the "Add Record" button to add usage data</p>
              </div>
            }
          </div>

          <!-- Navigation Buttons -->
          <div class="row mt-4">
            <div class="col-12 d-flex justify-content-between">
              <a href="@Url.Action("Details", "Booking", new { documentNumber = Model.Booking.DocumentNumber })"
                class="btn btn-outline-secondary">
                <i class="bx bx-arrow-back me-1"></i> Back to Booking Details
              </a>
            </div>
          </div>
        }
      </div>
    </div>
  </div>
</div>

<!-- Edit Record Modal -->
<div class="modal fade" id="editRecordModal" tabindex="-1" aria-labelledby="editRecordModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editRecordModalLabel">Edit Usage Record</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editRecordForm" asp-action="UpdateRecord" method="post">
          @Html.AntiForgeryToken()
          <input type="hidden" id="editRecordId" name="id">
          <div class="mb-3">
            <label for="editCategory" class="form-label">Category</label>
            <select class="form-select category-dropdown" id="editCategory" name="Category" required>
              <option value="0">Operating</option>
              <option value="1">Delay</option>
              <option value="2">Standby</option>
              <option value="3">Service</option>
              <option value="4">Breakdown</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editSubcategoryId" class="form-label">Subcategory</label>
            <select class="form-select" id="editSubcategoryId" name="SubcategoryId" required>
              <option value="">Select category first</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editStartTime" class="form-label">Start Time (HH:MM)</label>
            <input type="time" class="form-control" id="editStartTime" name="StartTime" required>
          </div>
          <div class="mb-3">
            <label for="editEndTime" class="form-label">End Time (HH:MM)</label>
            <input type="time" class="form-control" id="editEndTime" name="EndTime" required>
          </div>
          <div class="mb-3">
            <label for="editCalculatedDuration" class="form-label">Duration (Calculated)</label>
            <input type="text" class="form-control" id="editCalculatedDuration" readonly>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" id="updateRecordBtn" class="btn btn-primary">Update Record</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel"
  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Are you sure you want to delete this usage record? This action cannot be undone.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
        <form id="deleteRecordForm" asp-action="DeleteRecord" method="post">
          @Html.AntiForgeryToken()
          <input type="hidden" id="deleteRecordId" name="id">
          <button type="submit" class="btn btn-danger">Delete</button>
        </form>
      </div>
    </div>
  </div>
</div>

@functions {
  string FormatTimeSpan(string timeSpan)
  {
    if (string.IsNullOrEmpty(timeSpan)) return "00:00";

    // Parse the timespan format "00:00:00"
    var parts = timeSpan.Split(':');
    if (parts.Length >= 2)
    {
      return $"{parts[0]}:{parts[1]}";
    }

    return "00:00";
  }
}

@section PageScripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  <script>
    // Global variables
    let hoursChart = null;
    let subcategoriesCache = {};

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function () {
      // Set up event listeners
      setupEventListeners();

      // Set default date to today (within booking range)
      setDefaultDate();

      // Initialize the chart
      initializeCharts();
    });

    // Set up event listeners
    function setupEventListeners() {
      // Toggle add record form
      document.getElementById('addRecordBtn').addEventListener('click', toggleAddRecordForm);
      document.getElementById('closeFormBtn').addEventListener('click', toggleAddRecordForm);
      document.getElementById('cancelAddBtn').addEventListener('click', toggleAddRecordForm);

      // Category change event for new record form
      document.getElementById('Category').addEventListener('change', function () {
        loadSubcategories(this.value, 'SubcategoryId');
      });

      // Category change event for edit record form
      document.getElementById('editCategory').addEventListener('change', function () {
        loadSubcategories(this.value, 'editSubcategoryId');
      });

      // Edit record links
      document.querySelectorAll('.edit-record').forEach(item => {
        item.addEventListener('click', function () {
          const recordId = this.getAttribute('data-record-id');
          const category = this.getAttribute('data-category');
          const subcategoryId = this.getAttribute('data-subcategory');
          const startTime = this.getAttribute('data-start-time');
          const endTime = this.getAttribute('data-end-time');

          openEditModal(recordId, category, subcategoryId, startTime, endTime);
        });
      });

      // Delete record links
      document.querySelectorAll('.delete-record').forEach(item => {
        item.addEventListener('click', function () {
          const recordId = this.getAttribute('data-record-id');
          openDeleteModal(recordId);
        });
      });

      // Update record button
      document.getElementById('updateRecordBtn').addEventListener('click', function () {
        document.getElementById('editRecordForm').submit();
      });

      // Duration calculation
      document.getElementById('StartTime').addEventListener('change', calculateDuration);
      document.getElementById('EndTime').addEventListener('change', calculateDuration);

      document.getElementById('editStartTime').addEventListener('change', calculateEditDuration);
      document.getElementById('editEndTime').addEventListener('change', calculateEditDuration);
    }

    // Set default date for new record
    function setDefaultDate() {
      const today = new Date();
      const startDateStr = '@Model.Booking?.StartDate.ToString("yyyy-MM-dd")';
      const endDateStr = '@Model.Booking?.EndDate.ToString("yyyy-MM-dd")';

      if (!startDateStr || !endDateStr) return;

      const startDate = new Date(startDateStr);
      const endDate = new Date(endDateStr);

      let defaultDate = today;
      if (today < startDate) {
        defaultDate = startDate;
      } else if (today > endDate) {
        defaultDate = endDate;
      }

      const dateInput = document.getElementById('Date');
      if (dateInput) {
        dateInput.value = formatDateForInput(defaultDate);
      }
    }

    // Format date for input (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }

    // Toggle add record form visibility
    function toggleAddRecordForm() {
      const form = document.getElementById('addRecordForm');
      if (form.style.display === 'none' || form.style.display === '') {
        form.style.display = 'block';
        // Reset form
        document.getElementById('usageRecordForm').reset();
        // Set default date
        setDefaultDate();
      } else {
        form.style.display = 'none';
      }
    }

    // Initialize charts
    function initializeCharts() {
      const ctx = document.getElementById('hoursChart').getContext('2d');

      if (hoursChart) {
        hoursChart.destroy();
      }

      // Get hours for each category from the ViewModel
      const operatingHours = timeSpanToHours('@Model.UsageSummary?.TotalOperatingTime');
      const delayHours = timeSpanToHours('@Model.UsageSummary?.TotalDelayTime');
      const standbyHours = timeSpanToHours('@Model.UsageSummary?.TotalStandbyTime');
      const serviceHours = timeSpanToHours('@Model.UsageSummary?.TotalServiceTime');
      const breakdownHours = timeSpanToHours('@Model.UsageSummary?.TotalBreakdownTime');

      hoursChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['Operating', 'Delay', 'Standby', 'Service', 'Breakdown'],
          datasets: [
            {
              label: 'Hours',
              data: [operatingHours, delayHours, standbyHours, serviceHours, breakdownHours],
              backgroundColor: [
                '#696cff', // Operating - Primary
                '#ffab00', // Delay - Warning
                '#03c3ec', // Standby - Info
                '#71dd37', // Service - Success
                '#ff3e1d' // Breakdown - Danger
              ],
              borderWidth: 0
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Hours'
              }
            }
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  const value = context.raw;
                  return `${value.toFixed(2)} hours`;
                }
              }
            }
          }
        }
      });
    }

    // Convert timespan to hours
    function timeSpanToHours(timeSpan) {
      if (!timeSpan) return 0;

      // Parse the timespan format "00:00:00"
      const parts = timeSpan.split(':');
      if (parts.length < 2) return 0;

      const hours = parseInt(parts[0]);
      const minutes = parseInt(parts[1]);

      // Convert to decimal hours
      return hours + minutes / 60;
    }

    // Load subcategories for a category
    async function loadSubcategories(categoryValue, targetSelectId) {
      const categoryId = parseInt(categoryValue);
      const targetSelect = document.getElementById(targetSelectId);

      // Clear current options
      targetSelect.innerHTML = '<option value="">Loading subcategories...</option>';

      try {
        // Check if we already have the subcategories cached
        if (subcategoriesCache[categoryId]) {
          populateSubcategorySelect(targetSelect, subcategoriesCache[categoryId]);
          return;
        }

        // Fetch subcategories from server
        const response = await fetch(`/CraneUsage/GetSubcategories/${categoryId}`);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const subcategories = await response.json();

        // Cache the subcategories
        subcategoriesCache[categoryId] = subcategories;

        // Populate the select
        populateSubcategorySelect(targetSelect, subcategories);
      } catch (error) {
        console.error('Error loading subcategories:', error);
        targetSelect.innerHTML = '<option value="">Error loading subcategories</option>';
      }
    }

    // Populate subcategory select with options
    function populateSubcategorySelect(selectElement, subcategories) {
      selectElement.innerHTML = '';

      if (!subcategories || subcategories.length === 0) {
        selectElement.innerHTML = '<option value="">No subcategories available</option>';
        return;
      }

      // Add default option
      const defaultOption = document.createElement('option');
      defaultOption.value = '';
      defaultOption.textContent = 'Select a subcategory';
      selectElement.appendChild(defaultOption);

      // Add subcategories
      subcategories.forEach(subcategory => {
        const option = document.createElement('option');
        option.value = subcategory.id;
        option.textContent = subcategory.name;
        selectElement.appendChild(option);
      });
    }

    // Open edit modal with record data
    function openEditModal(recordId, category, subcategoryId, startTime, endTime) {
      // Set record ID for update
      document.getElementById('editRecordId').value = recordId;

      // Set current values
      document.getElementById('editCategory').value = category;

      // Load subcategories for this category
      loadSubcategories(category, 'editSubcategoryId').then(() => {
        // Set subcategory after subcategories are loaded
        document.getElementById('editSubcategoryId').value = subcategoryId;
      });

      // Set times in the form
      document.getElementById('editStartTime').value = startTime;
      document.getElementById('editEndTime').value = endTime;

      // Calculate duration
      calculateEditDuration();

      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('editRecordModal'));
      modal.show();
    }

    // Open delete confirmation modal
    function openDeleteModal(recordId) {
      document.getElementById('deleteRecordId').value = recordId;

      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
      modal.show();
    }

    // Calculate duration based on start and end time
    function calculateDuration() {
      const startTimeInput = document.getElementById('StartTime');
      const endTimeInput = document.getElementById('EndTime');
      const calculatedDurationInput = document.getElementById('calculatedDuration');

      if (startTimeInput.value && endTimeInput.value) {
        // Parse time inputs into minutes
        const startTimeParts = startTimeInput.value.split(':');
        const endTimeParts = endTimeInput.value.split(':');

        const startMinutes = parseInt(startTimeParts[0]) * 60 + parseInt(startTimeParts[1]);
        let endMinutes = parseInt(endTimeParts[0]) * 60 + parseInt(endTimeParts[1]);

        // If end time is less than start time, assume it's the next day
        if (endMinutes < startMinutes) {
          endMinutes += 24 * 60; // Add 24 hours
        }

        // Calculate duration in minutes
        const durationMinutes = endMinutes - startMinutes;

        // Format as HH:MM
        const hours = Math.floor(durationMinutes / 60);
        const minutes = durationMinutes % 60;
        calculatedDurationInput.value = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
      } else {
        calculatedDurationInput.value = '';
      }
    }

    // Calculate duration for edit form
    function calculateEditDuration() {
      const startTimeInput = document.getElementById('editStartTime');
      const endTimeInput = document.getElementById('editEndTime');
      const calculatedDurationInput = document.getElementById('editCalculatedDuration');

      if (startTimeInput.value && endTimeInput.value) {
        // Parse time inputs into minutes
        const startTimeParts = startTimeInput.value.split(':');
        const endTimeParts = endTimeInput.value.split(':');

        const startMinutes = parseInt(startTimeParts[0]) * 60 + parseInt(startTimeParts[1]);
        let endMinutes = parseInt(endTimeParts[0]) * 60 + parseInt(endTimeParts[1]);

        // If end time is less than start time, assume it's the next day
        if (endMinutes < startMinutes) {
          endMinutes += 24 * 60; // Add 24 hours
        }

        // Calculate duration in minutes
        const durationMinutes = endMinutes - startMinutes;

        // Format as HH:MM
        const hours = Math.floor(durationMinutes / 60);
        const minutes = durationMinutes % 60;
        calculatedDurationInput.value = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
      } else {
        calculatedDurationInput.value = '';
      }
    }

    // Initialize any pre-loaded subcategories for the Edit modal
    window.addEventListener('load', function () {
              @foreach (var categoryPair in Model.Subcategories)
        {
          <text>
            subcategoriesCache[@((int)categoryPair.Key)] = [
                            @foreach (var subcategory in categoryPair.Value)
            {
              <text>{id: @subcategory.Id, name: '@subcategory.Name' },</text>
            }
            ];
          </text>
      }
          });
  </script>
}
