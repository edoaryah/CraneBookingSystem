@{
  ViewData["Title"] = "Crane Usage History";
  Layout = "_ContentNavbarLayout";
}

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Crane Usage History</h5>
  </div>

  <!-- Loading indicator -->
  <div id="loadingIndicator" class="text-center py-5">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Loading usage history...</p>
  </div>

  <!-- Filters -->
  <div class="card-body pt-0 pt-md-4" id="filtersContainer" style="display: none;">
    <div class="row mb-3">
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="craneFilter" class="form-label">Crane</label>
        <select id="craneFilter" class="form-select">
          <option value="">All Cranes</option>
          <!-- Cranes will be loaded dynamically -->
        </select>
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="departmentFilter" class="form-label">Department</label>
        <select id="departmentFilter" class="form-select">
          <option value="">All Departments</option>
          <!-- Departments will be loaded dynamically -->
        </select>
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="dateFrom" class="form-label">From Date</label>
        <input type="date" id="dateFrom" class="form-control">
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="dateTo" class="form-label">To Date</label>
        <input type="date" id="dateTo" class="form-control">
      </div>
    </div>
    <div class="row">
      <div class="col-12 d-flex justify-content-end">
        <button id="resetFiltersBtn" class="btn btn-outline-secondary me-2">Reset Filters</button>
        <button id="applyFiltersBtn" class="btn btn-primary">Apply Filters</button>
      </div>
    </div>
  </div>

  <!-- Booking history table -->
  <div class="table-responsive text-nowrap" id="bookingTableContainer" style="display: none;">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Booking #</th>
          <th>Department</th>
          <th>Crane</th>
          <th>Date Range</th>
          <th>Availability</th>
          <th>Utilisation</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody class="table-border-bottom-0" id="bookingTableBody">
        <!-- Will be filled dynamically -->
      </tbody>
    </table>
  </div>

  <!-- No data message -->
  <div id="noDataMessage" class="text-center py-5" style="display: none;">
    <i class="bx bx-time text-secondary mb-2" style="font-size: 3rem;"></i>
    <p class="mb-0">No usage records found</p>
  </div>

  <!-- Error message -->
  <div id="errorMessage" class="alert alert-danger mx-4 mb-4" style="display: none;">
    An error occurred while loading data. Please try again later.
  </div>
</div>

<!-- Crane Usage Summary Modal -->
<div class="modal fade" id="usageSummaryModal" tabindex="-1" aria-labelledby="usageSummaryModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="usageSummaryModalLabel">Crane Usage Summary</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <p><strong>Booking:</strong> <span id="modalBookingNumber"></span></p>
            <p><strong>Department:</strong> <span id="modalDepartment"></span></p>
            <p><strong>Crane:</strong> <span id="modalCrane"></span></p>
          </div>
          <div class="col-md-6">
            <p><strong>Date Range:</strong> <span id="modalDateRange"></span></p>
            <p><strong>Location:</strong> <span id="modalLocation"></span></p>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body p-3">
                <h6 class="card-title">Availability</h6>
                <div class="d-flex align-items-center mb-2">
                  <span id="modalAvailability" class="fs-4 fw-bold me-2">0%</span>
                  <span class="text-muted">(Available Hours / Total Hours)</span>
                </div>
                <div class="progress" style="height: 20px;">
                  <div id="modalAvailabilityBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body p-3">
                <h6 class="card-title">Utilisation</h6>
                <div class="d-flex align-items-center mb-2">
                  <span id="modalUtilisation" class="fs-4 fw-bold me-2">0%</span>
                  <span class="text-muted">(Usage Hours / Available Hours)</span>
                </div>
                <div class="progress" style="height: 20px;">
                  <div id="modalUtilisationBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Category</th>
                <th>Hours</th>
                <th>Percentage</th>
              </tr>
            </thead>
            <tbody id="modalCategoryTable">
              <!-- Will be filled dynamically -->
            </tbody>
            <tfoot>
              <tr class="table-active">
                <th>Total</th>
                <th id="modalTotalHours">0:00</th>
                <th>100%</th>
              </tr>
            </tfoot>
          </table>
        </div>

        <div class="text-center mt-3">
          <canvas id="modalChart" height="200"></canvas>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="viewDetailsBtn" href="#" class="btn btn-primary">View Full Details</a>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  <script>
    // DOM Elements
    const loadingIndicator = document.getElementById('loadingIndicator');
    const filtersContainer = document.getElementById('filtersContainer');
    const bookingTableContainer = document.getElementById('bookingTableContainer');
    const bookingTableBody = document.getElementById('bookingTableBody');
    const noDataMessage = document.getElementById('noDataMessage');
    const errorMessage = document.getElementById('errorMessage');

    // Filter elements
    const craneFilter = document.getElementById('craneFilter');
    const departmentFilter = document.getElementById('departmentFilter');
    const dateFromFilter = document.getElementById('dateFrom');
    const dateToFilter = document.getElementById('dateTo');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    const applyFiltersBtn = document.getElementById('applyFiltersBtn');

    // Global variables
    let bookings = [];
    let cranes = [];
    let departments = [];
    let modalChart = null;

    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
      // Set up event listeners
      resetFiltersBtn.addEventListener('click', resetFilters);
      applyFiltersBtn.addEventListener('click', applyFilters);

      // Set default date range (last 30 days)
      setDefaultDateRange();

      // Load initial data
      loadInitialData();
    });

    // Set default date range (last 30 days)
    function setDefaultDateRange() {
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);

      dateFromFilter.value = formatDateForInput(thirtyDaysAgo);
      dateToFilter.value = formatDateForInput(today);
    }

    // Format date for input (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }

    // Load initial data
    async function loadInitialData() {
      showLoading();

      try {
        // Fetch cranes and bookings with usage data
        await Promise.all([loadCranes(), loadDepartments(), loadBookingsWithUsage()]);

        // Show filters and table
        filtersContainer.style.display = 'block';

        // Apply initial filters
        applyFilters();
      } catch (error) {
        console.error('Error loading initial data:', error);
        showError('Failed to load data. Please try again later.');
      }
    }

    // Load cranes from API
    async function loadCranes() {
      try {
        const response = await fetch('/api/Cranes', {
          headers: {
            Authorization: `Bearer ${getToken()}`
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        cranes = await response.json();

        // Populate crane filter dropdown
        populateCraneFilter();
      } catch (error) {
        console.error('Error loading cranes:', error);
        throw error;
      }
    }

    // Populate crane filter dropdown
    function populateCraneFilter() {
      // Clear existing options except the first one
      while (craneFilter.options.length > 1) {
        craneFilter.remove(1);
      }

      // Sort cranes by code
      cranes.sort((a, b) => a.code.localeCompare(b.code));

      // Add crane options
      cranes.forEach(crane => {
        const option = document.createElement('option');
        option.value = crane.id;
        option.textContent = `${crane.code} (${crane.capacity} ton)`;
        craneFilter.appendChild(option);
      });
    }

    // Load departments from bookings
    async function loadDepartments() {
      try {
        const response = await fetch('/api/Bookings', {
          headers: {
            Authorization: `Bearer ${getToken()}`
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const allBookings = await response.json();

        // Extract unique departments
        departments = [...new Set(allBookings.map(booking => booking.department))];

        // Sort departments alphabetically
        departments.sort();

        // Populate department filter dropdown
        populateDepartmentFilter();
      } catch (error) {
        console.error('Error loading departments:', error);
        throw error;
      }
    }

    // Populate department filter dropdown
    function populateDepartmentFilter() {
      // Clear existing options except the first one
      while (departmentFilter.options.length > 1) {
        departmentFilter.remove(1);
      }

      // Add department options
      departments.forEach(department => {
        const option = document.createElement('option');
        option.value = department;
        option.textContent = department;
        departmentFilter.appendChild(option);
      });
    }

    // Load bookings with usage data
    async function loadBookingsWithUsage() {
      try {
        // First get all bookings
        const bookingsResponse = await fetch('/api/Bookings', {
          headers: {
            Authorization: `Bearer ${getToken()}`
          }
        });

        if (!bookingsResponse.ok) {
          throw new Error(`HTTP error! status: ${bookingsResponse.status}`);
        }

        const allBookings = await bookingsResponse.json();

        // Get bookings with usage data
        bookings = [];

        for (const booking of allBookings) {
          try {
            // Try to get usage summary for each booking
            const summaryResponse = await fetch(`/api/CraneUsageRecords/Summary/${booking.id}`, {
              headers: {
                Authorization: `Bearer ${getToken()}`
              }
            });

            if (summaryResponse.ok) {
              const summary = await summaryResponse.json();

              // Only include bookings with usage records
              if (summary.usageRecords && summary.usageRecords.length > 0) {
                // Merge booking and summary data
                bookings.push({
                  ...booking,
                  usageSummary: summary
                });
              }
            }
          } catch (error) {
            console.error(`Error loading usage summary for booking ${booking.id}:`, error);
            // Continue with next booking even if this one fails
          }
        }

        // Sort bookings by date (newest first)
        bookings.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));
      } catch (error) {
        console.error('Error loading bookings with usage:', error);
        throw error;
      }
    }

    // Apply filters to the bookings
    function applyFilters() {
      const selectedCraneId = craneFilter.value ? parseInt(craneFilter.value) : null;
      const selectedDepartment = departmentFilter.value;
      const fromDate = dateFromFilter.value ? new Date(dateFromFilter.value) : null;
      const toDate = dateToFilter.value ? new Date(dateToFilter.value) : null;

      // Add one day to toDate to make it inclusive
      if (toDate) {
        toDate.setDate(toDate.getDate() + 1);
      }

      // Filter bookings
      const filteredBookings = bookings.filter(booking => {
        // Check crane filter
        if (selectedCraneId && booking.craneId !== selectedCraneId) {
          return false;
        }

        // Check department filter
        if (selectedDepartment && booking.department !== selectedDepartment) {
          return false;
        }

        // Check date range
        const bookingStartDate = new Date(booking.startDate);
        const bookingEndDate = new Date(booking.endDate);

        if (fromDate && bookingEndDate < fromDate) {
          return false;
        }

        if (toDate && bookingStartDate > toDate) {
          return false;
        }

        return true;
      });

      // Display filtered bookings
      displayBookings(filteredBookings);
    }

    // Reset filters to default
    function resetFilters() {
      craneFilter.value = '';
      departmentFilter.value = '';
      setDefaultDateRange();

      // Apply filters with reset values
      applyFilters();
    }

    // Display bookings in the table
    function displayBookings(filteredBookings) {
      bookingTableBody.innerHTML = '';

      if (filteredBookings.length === 0) {
        showNoData();
        return;
      }

      // Map cranes by ID for easier lookup
      const craneMap = {};
      cranes.forEach(crane => {
        craneMap[crane.id] = crane;
      });

      // Display each booking
      filteredBookings.forEach(booking => {
        const row = document.createElement('tr');

        // Format dates
        const startDate = new Date(booking.startDate);
        const endDate = new Date(booking.endDate);
        const formattedStartDate = formatDate(startDate);
        const formattedEndDate = formatDate(endDate);
        const dateRange = `${formattedStartDate} - ${formattedEndDate}`;

        // Get crane code
        const crane = craneMap[booking.craneId];
        const craneCode = crane ? crane.code : 'Unknown';

        // Get usage statistics
        const availability = booking.usageSummary.availabilityPercentage.toFixed(2);
        const utilisation = booking.usageSummary.utilisationPercentage.toFixed(2);

        // Create availability and utilisation progress bars
        const availabilityBar = createProgressBar(booking.usageSummary.availabilityPercentage);
        const utilisationBar = createProgressBar(booking.usageSummary.utilisationPercentage);

        // Populate row
        row.innerHTML = `
        <td><strong>${booking.bookingNumber}</strong></td>
        <td>${booking.department}</td>
        <td>${craneCode}</td>
        <td>${dateRange}</td>
        <td style="width: 150px;">${availabilityBar}</td>
        <td style="width: 150px;">${utilisationBar}</td>
        <td>
          <div class="dropdown">
            <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
              <i class="bx bx-dots-vertical-rounded"></i>
            </button>
            <div class="dropdown-menu">
              <a class="dropdown-item view-summary" href="javascript:void(0);" data-booking-id="${booking.id}">
                <i class="bx bx-bar-chart-alt-2 me-1"></i> View Summary
              </a>
              <a class="dropdown-item" href="/CraneUsage/Index/${booking.id}">
                <i class="bx bx-edit-alt me-1"></i> Edit Usage
              </a>
              <a class="dropdown-item" href="/BookingHistory/Details/${booking.id}">
                <i class="bx bx-show-alt me-1"></i> View Booking
              </a>
            </div>
          </div>
        </td>
      `;

        // Add event listener for view summary button
        row.querySelector('.view-summary').addEventListener('click', function () {
          openSummaryModal(booking);
        });

        bookingTableBody.appendChild(row);
      });

      showTable();
    }

    // Create a progress bar HTML for a percentage value
    function createProgressBar(percentage) {
      // Determine color based on percentage
      let colorClass = 'bg-danger';
      if (percentage >= 80) {
        colorClass = 'bg-success';
      } else if (percentage >= 60) {
        colorClass = 'bg-primary';
      } else if (percentage >= 40) {
        colorClass = 'bg-info';
      } else if (percentage >= 20) {
        colorClass = 'bg-warning';
      }

      return `
      <div class="d-flex align-items-center">
        <div class="progress w-100 me-2" style="height: 6px;">
          <div class="progress-bar ${colorClass}" role="progressbar" style="width: ${percentage}%"
               aria-valuenow="${percentage}" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <small>${percentage}%</small>
      </div>
    `;
    }

    // Open summary modal for a booking
    function openSummaryModal(booking) {
      // Map cranes by ID for easier lookup
      const craneMap = {};
      cranes.forEach(crane => {
        craneMap[crane.id] = crane;
      });

      // Get crane code
      const crane = craneMap[booking.craneId];
      const craneCode = crane ? crane.code : 'Unknown';

      // Format dates
      const startDate = new Date(booking.startDate);
      const endDate = new Date(booking.endDate);
      const formattedStartDate = formatDate(startDate);
      const formattedEndDate = formatDate(endDate);
      const dateRange = `${formattedStartDate} - ${formattedEndDate}`;

      // Set modal content
      document.getElementById('modalBookingNumber').textContent = booking.bookingNumber;
      document.getElementById('modalDepartment').textContent = booking.department;
      document.getElementById('modalCrane').textContent = craneCode;
      document.getElementById('modalDateRange').textContent = dateRange;
      document.getElementById('modalLocation').textContent = booking.location || '-';

      // Set KPI values
      const availability = booking.usageSummary.availabilityPercentage;
      const utilisation = booking.usageSummary.utilisationPercentage;

      document.getElementById('modalAvailability').textContent = `${availability.toFixed(2)}%`;
      document.getElementById('modalAvailabilityBar').style.width = `${availability}%`;

      document.getElementById('modalUtilisation').textContent = `${utilisation.toFixed(2)}%`;
      document.getElementById('modalUtilisationBar').style.width = `${utilisation}%`;

      // Set view details button href
      document.getElementById('viewDetailsBtn').href = `/CraneUsage/Index/${booking.id}`;

      // Populate category table
      populateCategoryTable(booking.usageSummary);

      // Create chart
      createModalChart(booking.usageSummary);

      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('usageSummaryModal'));
      modal.show();
    }

    // Populate category table in the modal
    function populateCategoryTable(summary) {
      const tableBody = document.getElementById('modalCategoryTable');
      tableBody.innerHTML = '';

      // Calculate total hours (in minutes for precision)
      const totalMinutes =
        getTimeSpanMinutes(summary.totalOperatingTime) +
        getTimeSpanMinutes(summary.totalDelayTime) +
        getTimeSpanMinutes(summary.totalStandbyTime) +
        getTimeSpanMinutes(summary.totalServiceTime) +
        getTimeSpanMinutes(summary.totalBreakdownTime);

      // Set total hours
      document.getElementById('modalTotalHours').textContent = formatMinutesToTimeSpan(totalMinutes);

      // Add rows for each category
      const categories = [
        { name: 'Operating', time: summary.totalOperatingTime, color: '#696cff' },
        { name: 'Delay', time: summary.totalDelayTime, color: '#ffab00' },
        { name: 'Standby', time: summary.totalStandbyTime, color: '#03c3ec' },
        { name: 'Service', time: summary.totalServiceTime, color: '#71dd37' },
        { name: 'Breakdown', time: summary.totalBreakdownTime, color: '#ff3e1d' }
      ];

      categories.forEach(category => {
        const minutes = getTimeSpanMinutes(category.time);
        const percentage = totalMinutes > 0 ? ((minutes / totalMinutes) * 100).toFixed(2) : '0.00';

        const row = document.createElement('tr');
        row.innerHTML = `
        <td>
          <div class="d-flex align-items-center">
            <span class="badge rounded-pill me-2" style="background-color: ${category.color};">&nbsp;</span>
            ${category.name}
          </div>
        </td>
        <td>${formatMinutesToTimeSpan(minutes)}</td>
        <td>${percentage}%</td>
      `;

        tableBody.appendChild(row);
      });
    }

    // Create chart in the modal
    function createModalChart(summary) {
      const ctx = document.getElementById('modalChart').getContext('2d');

      if (modalChart) {
        modalChart.destroy();
      }

      const operatingHours = getTimeSpanMinutes(summary.totalOperatingTime) / 60;
      const delayHours = getTimeSpanMinutes(summary.totalDelayTime) / 60;
      const standbyHours = getTimeSpanMinutes(summary.totalStandbyTime) / 60;
      const serviceHours = getTimeSpanMinutes(summary.totalServiceTime) / 60;
      const breakdownHours = getTimeSpanMinutes(summary.totalBreakdownTime) / 60;

      modalChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Operating', 'Delay', 'Standby', 'Service', 'Breakdown'],
          datasets: [
            {
              data: [operatingHours, delayHours, standbyHours, serviceHours, breakdownHours],
              backgroundColor: ['#696cff', '#ffab00', '#03c3ec', '#71dd37', '#ff3e1d']
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'right'
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  return `${label}: ${value.toFixed(2)} hours`;
                }
              }
            }
          }
        }
      });
    }

    // Convert timespan to minutes
    function getTimeSpanMinutes(timeSpan) {
      if (!timeSpan) return 0;

      // Parse the timespan format "00:00:00"
      const parts = timeSpan.split(':');
      const hours = parseInt(parts[0]);
      const minutes = parseInt(parts[1]);
      const seconds = parseInt(parts[2] || 0);

      return hours * 60 + minutes + seconds / 60;
    }

    // Format minutes to HH:MM timespan
    function formatMinutesToTimeSpan(minutes) {
      const hours = Math.floor(minutes / 60);
      const mins = Math.floor(minutes % 60);

      return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
    }

    // Format date to DD-MM-YYYY
    function formatDate(date) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
    }

    // UI helper functions
    function showLoading() {
      loadingIndicator.style.display = 'block';
      filtersContainer.style.display = 'none';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'none';
    }

    function showTable() {
      loadingIndicator.style.display = 'none';
      filtersContainer.style.display = 'block';
      bookingTableContainer.style.display = 'block';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'none';
    }

    function showNoData() {
      loadingIndicator.style.display = 'none';
      filtersContainer.style.display = 'block';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'block';
      errorMessage.style.display = 'none';
    }

    function showError(message) {
      loadingIndicator.style.display = 'none';
      filtersContainer.style.display = 'none';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'block';
      errorMessage.textContent = message;
    }

    // Get authentication token from localStorage
    function getToken() {
      return localStorage.getItem('token');
    }
  </script>
}
