<!-- Views/CraneUsage/History.cshtml -->
@model AspnetCoreMvcFull.Controllers.CraneUsageHistoryViewModel
@{
  ViewData["Title"] = "Crane Usage History";
  Layout = "_ContentNavbarLayout";
}

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Crane Usage History</h5>
  </div>

  <!-- Filters -->
  <div class="card-body pt-0 pt-md-4" id="filtersContainer">
    <div class="row mb-3">
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="craneFilter" class="form-label">Crane</label>
        <select id="craneFilter" class="form-select">
          <option value="">All Cranes</option>
          @foreach (var crane in Model.Cranes)
          {
            <option value="@crane.Id">@crane.Code (@crane.Capacity ton)</option>
          }
        </select>
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="departmentFilter" class="form-label">Department</label>
        <select id="departmentFilter" class="form-select">
          <option value="">All Departments</option>
          @{
            var departments = Model.Bookings.Select(b => b.Department).Distinct().OrderBy(d => d);
          }
          @foreach (var department in departments)
          {
            <option value="@department">@department</option>
          }
        </select>
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="dateFrom" class="form-label">From Date</label>
        <input type="date" id="dateFrom" class="form-control">
      </div>
      <div class="col-md-3 mb-2 mb-md-0">
        <label for="dateTo" class="form-label">To Date</label>
        <input type="date" id="dateTo" class="form-control">
      </div>
    </div>
    <div class="row">
      <div class="col-12 d-flex justify-content-end">
        <button id="resetFiltersBtn" class="btn btn-outline-secondary me-2">Reset Filters</button>
        <button id="applyFiltersBtn" class="btn btn-primary">Apply Filters</button>
      </div>
    </div>
  </div>

  <!-- Booking history table -->
  <div class="table-responsive text-nowrap" id="bookingTableContainer">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Booking #</th>
          <th>Department</th>
          <th>Crane</th>
          <th>Date Range</th>
          <th>Availability</th>
          <th>Utilisation</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody class="table-border-bottom-0" id="bookingTableBody">
        <!-- Loading indicator row -->
        <tr id="loadingRow">
          <td colspan="7" class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading booking data...</p>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- No data message -->
  <div id="noDataMessage" class="text-center py-5" style="display: none;">
    <i class="bx bx-time text-secondary mb-2" style="font-size: 3rem;"></i>
    <p class="mb-0">No usage records found</p>
  </div>

  <!-- Error message -->
  @if (!string.IsNullOrEmpty(Model.ErrorMessage))
  {
    <div class="alert alert-danger mx-4 mb-4">
      @Model.ErrorMessage
    </div>
  }
</div>

<!-- Crane Usage Summary Modal -->
<div class="modal fade" id="usageSummaryModal" tabindex="-1" aria-labelledby="usageSummaryModalLabel"
  aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="usageSummaryModalLabel">Crane Usage Summary</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <p><strong>Booking:</strong> <span id="modalBookingNumber"></span></p>
            <p><strong>Department:</strong> <span id="modalDepartment"></span></p>
            <p><strong>Crane:</strong> <span id="modalCrane"></span></p>
          </div>
          <div class="col-md-6">
            <p><strong>Date Range:</strong> <span id="modalDateRange"></span></p>
            <p><strong>Location:</strong> <span id="modalLocation"></span></p>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body p-3">
                <h6 class="card-title">Availability</h6>
                <div class="d-flex align-items-center mb-2">
                  <span id="modalAvailability" class="fs-4 fw-bold me-2">0%</span>
                  <span class="text-muted">(Available Hours / Total Hours)</span>
                </div>
                <div class="progress" style="height: 20px;">
                  <div id="modalAvailabilityBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card mb-3">
              <div class="card-body p-3">
                <h6 class="card-title">Utilisation</h6>
                <div class="d-flex align-items-center mb-2">
                  <span id="modalUtilisation" class="fs-4 fw-bold me-2">0%</span>
                  <span class="text-muted">(Usage Hours / Available Hours)</span>
                </div>
                <div class="progress" style="height: 20px;">
                  <div id="modalUtilisationBar" class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Category</th>
                <th>Hours</th>
                <th>Percentage</th>
              </tr>
            </thead>
            <tbody id="modalCategoryTable">
              <!-- Will be filled dynamically -->
            </tbody>
            <tfoot>
              <tr class="table-active">
                <th>Total</th>
                <th id="modalTotalHours">0:00</th>
                <th>100%</th>
              </tr>
            </tfoot>
          </table>
        </div>

        <div class="text-center mt-3">
          <canvas id="modalChart" height="200"></canvas>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <a id="viewDetailsBtn" href="#" class="btn btn-primary">View Full Details</a>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  <script>
    // Global variables
    let bookings = [];
    let filteredBookings = [];
    let modalChart = null;

    // DOM Elements
    const loadingRow = document.getElementById('loadingRow');
    const bookingTableBody = document.getElementById('bookingTableBody');
    const noDataMessage = document.getElementById('noDataMessage');

    // Filter elements
    const craneFilter = document.getElementById('craneFilter');
    const departmentFilter = document.getElementById('departmentFilter');
    const dateFromFilter = document.getElementById('dateFrom');
    const dateToFilter = document.getElementById('dateTo');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    const applyFiltersBtn = document.getElementById('applyFiltersBtn');

    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
      // Set up event listeners
      resetFiltersBtn.addEventListener('click', resetFilters);
      applyFiltersBtn.addEventListener('click', applyFilters);

      // Set default date range (last 30 days)
      setDefaultDateRange();

      // Load bookings from the model
      loadBookingsFromModel();
    });

    // Set default date range (last 30 days)
    function setDefaultDateRange() {
      const today = new Date();
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(today.getDate() - 30);

      dateFromFilter.value = formatDateForInput(thirtyDaysAgo);
      dateToFilter.value = formatDateForInput(today);
    }

    // Format date for input (YYYY-MM-DD)
    function formatDateForInput(date) {
      return date.toISOString().split('T')[0];
    }

    // Load bookings from the model
    function loadBookingsFromModel() {
      // Hide loading row
      loadingRow.style.display = 'none';

      // Initialize the bookings array
      bookings = [];

      // We'll fetch usage summaries for bookings that have usages
      // This would be in a loop loading from an actual data source
      fetchBookingsWithUsage();
    }

    // Fetch bookings with usage data
    async function fetchBookingsWithUsage() {
      try {
        const tableBody = document.getElementById('bookingTableBody');
        tableBody.innerHTML = ''; // Clear table first

                        // Here we would normally do a fetch, but to make it work without API,
                        // we'll load all bookings into a model array and then filter them

                        @foreach (var booking in Model.Bookings)
          {
            <text>
              bookings.push({
                id: @booking.Id,
              bookingNumber: '@booking.BookingNumber',
              documentNumber: '@booking.DocumentNumber', // Tambahkan ini
              department: '@booking.Department',
              craneId: @booking.CraneId,
              craneCode: '@booking.CraneCode',
              startDate: new Date('@booking.StartDate.ToString("yyyy-MM-dd")'),
              endDate: new Date('@booking.EndDate.ToString("yyyy-MM-dd")'),
              location: '@(booking.Location ?? "")'
                                        });
            </text>
        }

          // Apply initial filters
          applyFilters();
      }
      catch (error) {
        console.error('Error loading bookings:', error);
        tableBody.innerHTML = `
                            <tr>
                                <td colspan="7" class="text-center text-danger">
                                    Error loading booking data. Please try again later.
                                </td>
                            </tr>
                        `;
      }
    }

    // Apply filters to the bookings
    function applyFilters() {
      const selectedCraneId = craneFilter.value ? parseInt(craneFilter.value) : null;
      const selectedDepartment = departmentFilter.value;
      const fromDate = dateFromFilter.value ? new Date(dateFromFilter.value) : null;
      const toDate = dateToFilter.value ? new Date(dateToFilter.value) : null;

      // Add one day to toDate to make it inclusive
      if (toDate) {
        toDate.setDate(toDate.getDate() + 1);
      }

      // Filter bookings
      filteredBookings = bookings.filter(booking => {
        // Check crane filter
        if (selectedCraneId && booking.craneId !== selectedCraneId) {
          return false;
        }

        // Check department filter
        if (selectedDepartment && booking.department !== selectedDepartment) {
          return false;
        }

        // Check date range
        if (fromDate && booking.endDate < fromDate) {
          return false;
        }

        if (toDate && booking.startDate > toDate) {
          return false;
        }

        return true;
      });

      // Display filtered bookings
      displayBookings(filteredBookings);
    }

    // Reset filters to default
    function resetFilters() {
      craneFilter.value = '';
      departmentFilter.value = '';
      setDefaultDateRange();

      // Apply filters with reset values
      applyFilters();
    }

    // Display bookings in the table
    function displayBookings(bookingsToDisplay) {
      const tableBody = document.getElementById('bookingTableBody');
      tableBody.innerHTML = '';

      if (bookingsToDisplay.length === 0) {
        tableBody.innerHTML = `
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <i class="bx bx-time text-secondary mb-2" style="font-size: 3rem;"></i>
                                    <p class="mb-0">No bookings found matching your filters</p>
                                </td>
                            </tr>
                        `;
        return;
      }

      // For each booking, we'll need to get the usage summary
      bookingsToDisplay.forEach(booking => {
        // Here we would normally fetch the usage summary for this booking
        // For this example, we'll simulate random values

        // Simulate fetching usage summary
        fetchUsageSummary(booking, function (summary) {
          // Create a row with the booking and summary data
          createBookingRow(booking, summary);
        });
      });
    }

    // Simulate fetching a usage summary for a booking
    function fetchUsageSummary(booking, callback) {
      // In a real implementation, this would be a fetch request
      // For now, we'll simulate with random data
      setTimeout(() => {
        const summary = {
          availabilityPercentage: Math.random() * 100,
          utilisationPercentage: Math.random() * 100,
          // Other summary data would go here
        };
        callback(summary);
      }, 100);
    }

    // Create and append a row for a booking with its usage summary
    function createBookingRow(booking, summary) {
      const row = document.createElement('tr');

      // Format dates
      const startDate = formatDate(booking.startDate);
      const endDate = formatDate(booking.endDate);
      const dateRange = `${startDate} - ${endDate}`;

      // Create availability and utilisation progress bars
      const availability = summary.availabilityPercentage.toFixed(2);
      const utilisation = summary.utilisationPercentage.toFixed(2);
      const availabilityBar = createProgressBar(summary.availabilityPercentage);
      const utilisationBar = createProgressBar(summary.utilisationPercentage);

      // Populate row
      row.innerHTML = `
                        <td><strong>${booking.bookingNumber}</strong></td>
                        <td>${booking.department}</td>
                        <td>${booking.craneCode}</td>
                        <td>${dateRange}</td>
                        <td style="width: 150px;">${availabilityBar}</td>
                        <td style="width: 150px;">${utilisationBar}</td>
                        <td>
                            <div class="dropdown">
                                <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item view-summary" href="javascript:void(0);" data-booking-id="${booking.id}" data-document-number="${booking.documentNumber}">
                                        <i class="bx bx-bar-chart-alt-2 me-1"></i> View Summary
                                    </a>
                                    <a class="dropdown-item" href="/CraneUsage/Index?documentNumber=${booking.documentNumber}">
                                        <i class="bx bx-edit-alt me-1"></i> Edit Usage
                                    </a>
                                    <a class="dropdown-item" href="/Booking/Details?documentNumber=${booking.documentNumber}">
                                        <i class="bx bx-show-alt me-1"></i> View Booking
                                    </a>
                                </div>
                            </div>
                        </td>
                    `;

      // Add event listener for view summary button
      row.querySelector('.view-summary').addEventListener('click', function () {
        openSummaryModal(booking, summary);
      });

      bookingTableBody.appendChild(row);
    }

    // Create a progress bar HTML for a percentage value
    function createProgressBar(percentage) {
      // Determine color based on percentage
      let colorClass = 'bg-danger';
      if (percentage >= 80) {
        colorClass = 'bg-success';
      } else if (percentage >= 60) {
        colorClass = 'bg-primary';
      } else if (percentage >= 40) {
        colorClass = 'bg-info';
      } else if (percentage >= 20) {
        colorClass = 'bg-warning';
      }

      return `
                        <div class="d-flex align-items-center">
                            <div class="progress w-100 me-2" style="height: 6px;">
                                <div class="progress-bar ${colorClass}" role="progressbar" style="width: ${percentage}%"
                                    aria-valuenow="${percentage}" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                            <small>${percentage}%</small>
                        </div>
                    `;
    }

    // Open summary modal for a booking
    function openSummaryModal(booking, summary) {
      // Simulate fetching detailed usage data
      simulateFetchingDetailedUsage(booking.id, function (detailedSummary) {
        // Set modal content with booking and detailed summary
        document.getElementById('modalBookingNumber').textContent = booking.bookingNumber;
        document.getElementById('modalDepartment').textContent = booking.department;
        document.getElementById('modalCrane').textContent = booking.craneCode;
        document.getElementById('modalDateRange').textContent =
          `${formatDate(booking.startDate)} - ${formatDate(booking.endDate)}`;
        document.getElementById('modalLocation').textContent = booking.location || '-';

        // Set KPI values
        const availability = summary.availabilityPercentage;
        const utilisation = summary.utilisationPercentage;

        document.getElementById('modalAvailability').textContent = `${availability.toFixed(2)}%`;
        document.getElementById('modalAvailabilityBar').style.width = `${availability}%`;

        document.getElementById('modalUtilisation').textContent = `${utilisation.toFixed(2)}%`;
        document.getElementById('modalUtilisationBar').style.width = `${utilisation}%`;

        // Di bagian openSummaryModal() function:
        // Set view details button href
        document.getElementById('viewDetailsBtn').href = `/CraneUsage/Index?documentNumber=${booking.documentNumber}`;

        // Populate category table and chart
        populateModalCategoryTable(detailedSummary);
        createModalChart(detailedSummary);

        // Show modal
        const modal = new bootstrap.Modal(document.getElementById('usageSummaryModal'));
        modal.show();
      });
    }

    // Simulate fetching detailed usage data (this would be an API call in real app)
    function simulateFetchingDetailedUsage(bookingId, callback) {
      // Simulate API delay
      setTimeout(() => {
        // Generate random time values
        const operatingHours = Math.random() * 20;
        const delayHours = Math.random() * 5;
        const standbyHours = Math.random() * 5;
        const serviceHours = Math.random() * 3;
        const breakdownHours = Math.random() * 2;

        const totalHours = operatingHours + delayHours + standbyHours + serviceHours + breakdownHours;

        // Convert to timespan format
        const detailedSummary = {
          totalOperatingTime: formatMinutesToTimeSpan(operatingHours * 60),
          totalDelayTime: formatMinutesToTimeSpan(delayHours * 60),
          totalStandbyTime: formatMinutesToTimeSpan(standbyHours * 60),
          totalServiceTime: formatMinutesToTimeSpan(serviceHours * 60),
          totalBreakdownTime: formatMinutesToTimeSpan(breakdownHours * 60),
          totalMinutes: totalHours * 60
        };

        callback(detailedSummary);
      }, 200);
    }

    // Populate category table in the modal
    function populateModalCategoryTable(summary) {
      const tableBody = document.getElementById('modalCategoryTable');
      tableBody.innerHTML = '';

      // Calculate total minutes
      const totalMinutes = summary.totalMinutes;

      // Set total hours
      document.getElementById('modalTotalHours').textContent = formatMinutesToTimeSpan(totalMinutes);

      // Add rows for each category
      const categories = [
        { name: 'Operating', time: summary.totalOperatingTime, color: '#696cff' },
        { name: 'Delay', time: summary.totalDelayTime, color: '#ffab00' },
        { name: 'Standby', time: summary.totalStandbyTime, color: '#03c3ec' },
        { name: 'Service', time: summary.totalServiceTime, color: '#71dd37' },
        { name: 'Breakdown', time: summary.totalBreakdownTime, color: '#ff3e1d' }
      ];

      categories.forEach(category => {
        const minutes = getTimeSpanMinutes(category.time);
        const percentage = totalMinutes > 0 ? ((minutes / totalMinutes) * 100).toFixed(2) : '0.00';

        const row = document.createElement('tr');
        row.innerHTML = `
                            <td>
                                <div class="d-flex align-items-center">
                                    <span class="badge rounded-pill me-2" style="background-color: ${category.color};">&nbsp;</span>
                                    ${category.name}
                                </div>
                            </td>
                            <td>${category.time}</td>
                            <td>${percentage}%</td>
                        `;

        tableBody.appendChild(row);
      });
    }

    // Create chart in the modal
    function createModalChart(summary) {
      const ctx = document.getElementById('modalChart').getContext('2d');

      if (modalChart) {
        modalChart.destroy();
      }

      const operatingHours = getTimeSpanMinutes(summary.totalOperatingTime) / 60;
      const delayHours = getTimeSpanMinutes(summary.totalDelayTime) / 60;
      const standbyHours = getTimeSpanMinutes(summary.totalStandbyTime) / 60;
      const serviceHours = getTimeSpanMinutes(summary.totalServiceTime) / 60;
      const breakdownHours = getTimeSpanMinutes(summary.totalBreakdownTime) / 60;

      modalChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ['Operating', 'Delay', 'Standby', 'Service', 'Breakdown'],
          datasets: [
            {
              data: [operatingHours, delayHours, standbyHours, serviceHours, breakdownHours],
              backgroundColor: ['#696cff', '#ffab00', '#03c3ec', '#71dd37', '#ff3e1d']
            }
          ]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'right'
            },
            tooltip: {
              callbacks: {
                label: function (context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  return `${label}: ${value.toFixed(2)} hours`;
                }
              }
            }
          }
        }
      });
    }

    // Convert timespan to minutes
    function getTimeSpanMinutes(timeSpan) {
      if (!timeSpan) return 0;

      // Parse the timespan format "00:00:00"
      const parts = timeSpan.split(':');
      const hours = parseInt(parts[0]);
      const minutes = parseInt(parts[1]);
      const seconds = parseInt(parts[2] || 0);

      return hours * 60 + minutes + seconds / 60;
    }

    // Format minutes to HH:MM timespan
    function formatMinutesToTimeSpan(minutes) {
      const hours = Math.floor(minutes / 60);
      const mins = Math.floor(minutes % 60);

      return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
    }

    // Format date to DD-MM-YYYY
    function formatDate(date) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
    }
  </script>
}
