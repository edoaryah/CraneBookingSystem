@model AspnetCoreMvcFull.ViewModels.BookingManagement.BookingFormViewModel
@{
  ViewData["Title"] = "Crane Schedule";
  Layout = "_ContentNavbarLayout";
}

<!-- Hidden field to store shift definitions -->
<input type="hidden" id="shiftDefinitionsData"
  value="@System.Text.Json.JsonSerializer.Serialize(Model.ShiftDefinitions)" />

<!-- Card Calendar -->
<div class="card">

  <div class="card-header">
    <!-- On large screens: 2 columns with justify-content-between -->
    <!-- On small screens: Stack vertically -->
    <div class="d-flex flex-column flex-md-row justify-content-between w-100">
      <!-- Column 1: Date Range Text -->
      <div class="mb-3 mb-md-0">
        <h5 class="card-title mb-0" id="dateRangeText"></h5>
      </div>

      <!-- Column 2: Contains buttons -->
      <div class="d-flex flex-row justify-content-between align-items-center">
        <!-- New Booking button -->
        <div>
          <a href="/BookingForm" class="btn btn-primary">
            <i class="bx bx-plus me-1"></i> New Booking
          </a>
        </div>

        <!-- Prev/Next buttons -->
        <div class="ms-2">
          <div class="btn-group">
            <button type="button" class="btn btn-icon btn-outline-primary" id="prevWeek" onclick="navigateWeek(-1)">
              <span class="tf-icons bx bx-chevron-left"></span>
            </button>
            <button type="button" class="btn btn-icon btn-outline-primary" id="nextWeek" onclick="navigateWeek(1)">
              <span class="tf-icons bx bx-chevron-right"></span>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading indicator -->
  <div id="calendarLoading" class="text-center py-5">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Loading calendar data...</p>
  </div>

  <!-- Calendar Content Wrapper with Horizontal Scroll -->
  <div id="calendarContent" class="calendar-scroll-container" style="display: none;">
    <!-- Section 2: Crane Data (Sticky Column) -->
    <div class="crane-data-column">
      <div class="crane-header">
        <div class="p-2">
          <div class="text-uppercase fw-bold">Crane ID</div>
          <div class="text-muted text-uppercase">Capacity</div>
        </div>
      </div>
      <div class="crane-list" id="craneList">
        <!-- Crane items will be populated by JavaScript -->
      </div>
    </div>

    <!-- Section 3: Schedule Table -->
    <div class="schedule-table-container">
      <div class="date-headers-row">
        @for (int i = 0; i < 7; i++)
        {
          <div class="date-header-cell">
            <div class="date-header p-2"></div>
          </div>
        }
      </div>

      <div class="schedule-rows" id="scheduleRows">
        <!-- Schedule rows will be populated by JavaScript -->
      </div>
    </div>
  </div>

  <!-- Error message for data loading failure -->
  <div id="calendarError" class="alert alert-danger m-3" style="display: none;">
    Failed to load calendar data. Please try again later or contact support.
  </div>
</div>

@section PageStyles {
  <style>
    /* Calendar Layout Styles */
    .calendar-scroll-container {
      display: flex;
      overflow-x: auto;
      position: relative;
      max-width: 100%;
    }

    /* Crane Data Column (Sticky) */
    .crane-data-column {
      position: sticky;
      left: 0;
      z-index: 10;
      width: 150px;
      flex-shrink: 0;
      background-color: #fff;
      box-shadow: 4px 0 5px -2px rgba(0, 0, 0, 0.05);
    }

    .crane-header {
      height: 60px;
      background-color: #f5f5f9;
      border-bottom: 1px solid #dbdade;
      border-right: 1px solid #dbdade;
      border-top: 1px solid #dbdade;
    }

    .crane-item {
      height: 180px;
      /* Adjusted for more flexible shift rows */
      border-bottom: 1px solid #dbdade;
      border-right: 1px solid #dbdade;
      background-color: #f5f5f9;
    }

    .crane-list .crane-item:last-child {
      border-bottom-left-radius: 0.375rem;
    }

    /* Schedule Table */
    .schedule-table-container {
      flex: 1;
      min-width: 700px;
      background-color: #fff;
    }

    .date-headers-row {
      display: flex;
      height: 60px;
      background-color: #f5f5f9;
    }

    .date-header-cell {
      flex: 1;
      min-width: 180px;
      border-right: 1px solid #dbdade;
      border-top: 1px solid #dbdade;
      border-bottom: 1px solid #dbdade;
      background-color: #f5f5f9;
    }

    .date-header-cell:last-child {
      border-right: none;
    }

    .schedule-rows {
      display: flex;
      flex-direction: column;
    }

    .schedule-row {
      display: flex;
      height: 180px;
      /* Adjusted for more flexible shift rows */
    }

    .schedule-cell {
      flex: 1;
      min-width: 180px;
      border-right: 1px solid #dbdade;
      border-bottom: 1px solid #dbdade;
      position: relative;
    }

    .schedule-row .schedule-cell:last-child {
      border-right: none;
    }

    /* Shift Container Styles */
    .shift-container {
      height: 100%;
      display: flex;
      flex-direction: column;
    }

    .shift-slot {
      border-bottom: 1px dashed #dbdade;
      position: relative;
      overflow: hidden;
    }

    .shift-slot:last-child {
      border-bottom: none;
    }

    .booking-card {
      margin: 0;
      padding: 6px 8px;
      border-radius: 0;
      font-size: 14px;
      overflow: hidden;
      height: 100%;
      position: relative;
      font-weight: 500;
    }

    .booking-card-content {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      width: 100%;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      text-overflow: ellipsis;
      overflow: hidden;
    }

    /* Department-based styling */
    .booking-card.dept-stores {
      background-color: rgba(113, 221, 55, 0.1);
      border-left: 5px solid #71dd37;
      color: #71dd37;
    }

    .booking-card.dept-default {
      background-color: rgba(133, 146, 163, 0.1);
      border-left: 5px solid #8592a3;
      color: #8592a3;
    }

    /* Maintenance Card Styles */
    .maintenance-card {
      background-color: rgba(255, 62, 29, 0.1);
      border-left: 5px solid #ff3e1d;
      color: #ff3e1d;
      z-index: 1;
      height: 100%;
      padding: 6px 8px;
      overflow: hidden;
      position: relative;
    }

    .maintenance-title {
      font-weight: bold;
      margin-bottom: 4px;
    }

    /* Date Header Styles */
    .date-header {
      text-align: left;
      padding: 8px;
    }

    .date-header .day-name {
      font-size: 0.875rem;
      color: #566a7f;
      font-weight: 500;
      margin-bottom: 2px;
    }

    .date-header .day-number {
      font-size: 1.25rem;
      font-weight: 600;
      color: #566a7f;
    }

    /* Cell sizing */
    .date-header-cell {
      min-width: 150px;
    }

    .schedule-cell {
      min-width: 150px;
    }

    /* Tooltip styles */
    .calendar-tooltip {
      position: absolute;
      z-index: 100;
      background-color: #fff;
      border: 1px solid #dbdade;
      border-radius: 4px;
      padding: 8px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      font-size: 12px;
      max-width: 250px;
      display: none;
    }

    .calendar-tooltip-title {
      font-weight: bold;
      margin-bottom: 4px;
    }

    .calendar-tooltip-content {
      color: #566a7f;
    }
  </style>
}

@section PageScripts {
  <script>
    // Initialize calendar when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
      initializeCalendar();
    });

    // Initialize to today's date
    let currentDate = new Date();
    // Reset time to midnight to avoid timezone issues
    currentDate.setHours(0, 0, 0, 0);
    let calendarData = null;
    let shiftDefinitions = [];
    let cranes = [];

    // Fungsi untuk menambahkan hari ke date
    function addDays(date, days) {
      const result = new Date(date);
      result.setDate(result.getDate() + days);
      return result;
    }

    // Fungsi untuk memformat tanggal untuk API
    function formatDateForApi(date) {
      // Format tanggal untuk API, tetap menggunakan zona waktu lokal (WITA)
      // karena server akan mengkonversinya ke UTC
      return date.toISOString().split('T')[0];
    }

    // Fungsi untuk menginisialisasi kalender
    function initializeCalendar() {
      updateDateHeaders();

      // Load shift definitions from view model
      loadShiftDefinitions();

      // Load cranes from view model
      loadCranes();

      // Fetch calendar data
      fetchCalendarData();

      // Disable prev button if we're at the current week
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Reset time for accurate comparison
      document.getElementById('prevWeek').disabled = currentDate <= today;

      // Initialize tooltip container
      if (!document.getElementById('calendar-tooltip')) {
        const tooltip = document.createElement('div');
        tooltip.id = 'calendar-tooltip';
        tooltip.className = 'calendar-tooltip';
        document.body.appendChild(tooltip);
      }
    }

    // Fungsi untuk memuat shift definitions dari ViewModel
    function loadShiftDefinitions() {
      try {
        const shiftDefinitionsInput = document.getElementById('shiftDefinitionsData');
        if (shiftDefinitionsInput && shiftDefinitionsInput.value) {
          const parsedData = JSON.parse(shiftDefinitionsInput.value);

          // Filter untuk shift yang aktif dan handle case sensitivity
          shiftDefinitions = parsedData.filter(shift =>
            shift.IsActive === true || shift.isActive === true
          );

          console.log('Loaded shift definitions from ViewModel:', shiftDefinitions);

          // Sort shift definitions by start time
          shiftDefinitions.sort((a, b) => {
            const timeA = (a.StartTime || a.startTime).split(':').map(Number);
            const timeB = (b.StartTime || b.startTime).split(':').map(Number);
            return (timeA[0] * 60 + timeA[1]) - (timeB[0] * 60 + timeB[1]);
          });

          return true;
        } else {
          console.error('Shift definitions data not found in ViewModel');
          document.getElementById('calendarError').style.display = 'block';
          return false;
        }
      } catch (error) {
        console.error('Error loading shift definitions from ViewModel:', error);
        document.getElementById('calendarError').style.display = 'block';
        return false;
      }
    }

    // Fungsi untuk memuat crane data dari ViewModel
    function loadCranes() {
      try {
        // Load cranes directly from the Model into JavaScript
        cranes = @Html.Raw(Json.Serialize(Model.AvailableCranes));
        console.log('Loaded cranes from ViewModel:', cranes);
        return true;
      } catch (error) {
        console.error('Error loading cranes from ViewModel:', error);
        document.getElementById('calendarError').style.display = 'block';
        return false;
      }
    }

    // Fungsi untuk memperbarui header tanggal
    function updateDateHeaders() {
      const dateHeaders = document.querySelectorAll('.date-header');
      for (let i = 0; i < 7; i++) {
        const date = addDays(currentDate, i);
        const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });
        const dayNumber = date.getDate();
        dateHeaders[i].innerHTML = `
                <div class="day-name">${dayName}</div>
                <div class="day-number">${dayNumber}</div>
              `;
      }

      // Update date range text
      const startDate = currentDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
      const endDate = addDays(currentDate, 6).toLocaleDateString('en-US', {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      });
      document.getElementById('dateRangeText').textContent = `${startDate} - ${endDate}`;
    }

    // Fungsi untuk mengambil data kalender dari API
    function fetchCalendarData() {
      // Show loading indicator
      document.getElementById('calendarLoading').style.display = 'block';
      document.getElementById('calendarContent').style.display = 'none';
      document.getElementById('calendarError').style.display = 'none';

      const startDateStr = formatDateForApi(currentDate);
      const endDateStr = formatDateForApi(addDays(currentDate, 6));

      fetch(`/api/Bookings/CalendarView?startDate=${startDateStr}&endDate=${endDateStr}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          // Proses data: tanggal dari server sudah dalam WITA
          calendarData = data;
          renderCalendar();

          // Hide loading, show content
          document.getElementById('calendarLoading').style.display = 'none';
          document.getElementById('calendarContent').style.display = 'flex';
        })
        .catch(error => {
          console.error('Error fetching calendar data:', error);
          // Show error message
          document.getElementById('calendarLoading').style.display = 'none';
          document.getElementById('calendarError').style.display = 'block';
        });
    }

    // Fungsi untuk merender kalender
    function renderCalendar() {
      if (!calendarData || !calendarData.cranes) {
        console.error('No calendar data available');
        return;
      }

      // Render crane list
      const craneListEl = document.getElementById('craneList');
      craneListEl.innerHTML = '';

      // Render schedule rows
      const scheduleRowsEl = document.getElementById('scheduleRows');
      scheduleRowsEl.innerHTML = '';

      calendarData.cranes.forEach(crane => {
        // Add crane to the crane list
        const craneItem = document.createElement('div');
        craneItem.className = 'crane-item';
        craneItem.dataset.craneId = crane.craneId;
        craneItem.innerHTML = `
                <div class="p-2">
                  <div class="fw-bold">${crane.craneId}</div>
                  <div class="text-muted">${crane.capacity} TON</div>
                </div>
              `;
        craneListEl.appendChild(craneItem);

        // Create schedule row for this crane
        const scheduleRow = document.createElement('div');
        scheduleRow.className = 'schedule-row';
        scheduleRow.dataset.craneId = crane.craneId;

        // Create cells for each day of the week
        for (let i = 0; i < 7; i++) {
          const cell = document.createElement('div');
          cell.className = 'schedule-cell';
          cell.dataset.dateOffset = i;

          // Create shift slots container
          const shiftsContainer = document.createElement('div');
          shiftsContainer.className = 'shift-container';

          // Create shift slots dynamically based on shift definitions
          if (shiftDefinitions.length > 0) {
            // Calculate the height percentage for each shift slot
            const slotHeightPercent = 100 / shiftDefinitions.length;

            shiftDefinitions.forEach(shift => {
              const shiftId = shift.Id || shift.id;
              const shiftSlot = document.createElement('div');
              shiftSlot.className = 'shift-slot';
              shiftSlot.dataset.shiftId = shiftId;
              shiftSlot.style.height = `${slotHeightPercent}%`;
              shiftsContainer.appendChild(shiftSlot);
            });
          } else {
            // Default fallback if no shift definitions loaded
            const defaultSlot = document.createElement('div');
            defaultSlot.className = 'shift-slot';
            defaultSlot.style.height = '100%';
            shiftsContainer.appendChild(defaultSlot);
          }

          cell.appendChild(shiftsContainer);
          scheduleRow.appendChild(cell);
        }

        scheduleRowsEl.appendChild(scheduleRow);
      });

      // Populate bookings and maintenance schedules into cells
      renderBookings();
      renderMaintenanceSchedules();

      // Add event listeners for tooltips
      setupTooltips();
    }

    // Fungsi untuk merender booking ke dalam sel-sel kalender
    function renderBookings() {
      if (!calendarData || !calendarData.cranes) return;

      calendarData.cranes.forEach(crane => {
        const bookings = crane.bookings || [];
        const row = document.querySelector(`.schedule-row[data-crane-id="${crane.craneId}"]`);

        if (!row) {
          console.warn(`Schedule row not found for crane ${crane.craneId}`);
          return;
        }

        // Loop through all bookings for this crane
        bookings.forEach(booking => {
          // Normalize the booking date - tanggal dari server sudah dalam WITA
          const bookingDate = new Date(booking.date);
          bookingDate.setHours(0, 0, 0, 0); // Reset time for accurate comparison

          // Calculate day offset from the start of the week (currentDate)
          const daysDiff = Math.floor((bookingDate - currentDate) / (24 * 60 * 60 * 1000));

          // Skip bookings outside the current week view
          if (daysDiff < 0 || daysDiff > 6) return;

          // Find the cell for this date
          const cell = row.querySelector(`.schedule-cell[data-date-offset="${daysDiff}"]`);
          if (!cell) return;

          // Process each shift in the booking
          booking.shifts.forEach(shift => {
            // Find the shift slot based on the shift definition ID
            const shiftSlot = cell.querySelector(`.shift-slot[data-shift-id="${shift.shiftDefinitionId}"]`);
            if (!shiftSlot) return;

            // Determine department class for styling
            let deptClass = 'dept-default';
            const department = booking.department.toLowerCase();

            if (department.includes('stores') || department.includes('inventory')) {
              deptClass = 'dept-stores';
            }

            // Create booking card
            const card = document.createElement('div');
            card.className = `booking-card ${deptClass}`;
            card.dataset.bookingId = booking.id;
            card.dataset.bookingNumber = booking.bookingNumber;
            card.dataset.department = booking.department;
            card.dataset.shiftName = shift.shiftName;
            card.dataset.startTime = shift.startTime;
            card.dataset.endTime = shift.endTime;

            const content = document.createElement('div');
            content.className = 'booking-card-content';
            content.textContent = booking.department;

            card.appendChild(content);
            shiftSlot.appendChild(card);
          });
        });
      });
    }

    // Fungsi untuk merender jadwal maintenance ke dalam sel-sel kalender
    function renderMaintenanceSchedules() {
      if (!calendarData || !calendarData.cranes) return;

      calendarData.cranes.forEach(crane => {
        const maintenanceSchedules = crane.maintenanceSchedules || [];
        const row = document.querySelector(`.schedule-row[data-crane-id="${crane.craneId}"]`);

        if (!row) {
          console.warn(`Schedule row not found for crane ${crane.craneId}`);
          return;
        }

        // Loop through all maintenance schedules for this crane
        maintenanceSchedules.forEach(maintenance => {
          // Normalize the maintenance date
          const maintenanceDate = new Date(maintenance.date);
          maintenanceDate.setHours(0, 0, 0, 0); // Reset time for accurate comparison

          // Calculate day offset from the start of the week (currentDate)
          const daysDiff = Math.floor((maintenanceDate - currentDate) / (24 * 60 * 60 * 1000));

          // Skip maintenance outside the current week view
          if (daysDiff < 0 || daysDiff > 6) return;

          // Find the cell for this date
          const cell = row.querySelector(`.schedule-cell[data-date-offset="${daysDiff}"]`);
          if (!cell) return;

          // Process each shift in the maintenance schedule
          maintenance.shifts.forEach(shift => {
            // Find the shift slot based on the shift definition ID
            const shiftSlot = cell.querySelector(`.shift-slot[data-shift-id="${shift.shiftDefinitionId}"]`);
            if (!shiftSlot) {
              console.warn(`Shift slot not found for shift definition ID ${shift.shiftDefinitionId}`);
              return;
            }

            // Create maintenance card
            const card = document.createElement('div');
            card.className = 'maintenance-card';
            card.dataset.maintenanceId = maintenance.id;
            card.dataset.maintenanceTitle = maintenance.title;
            card.dataset.shiftName = shift.shiftName;
            card.dataset.startTime = shift.startTime;
            card.dataset.endTime = shift.endTime;

            const title = document.createElement('div');
            title.className = 'maintenance-title';
            title.textContent = maintenance.title;

            card.appendChild(title);
            shiftSlot.appendChild(card);
          });
        });
      });
    }

    // Fungsi untuk mengatur tooltips
    function setupTooltips() {
      const tooltip = document.getElementById('calendar-tooltip');

      // Add event listeners to booking cards
      document.querySelectorAll('.booking-card').forEach(card => {
        card.addEventListener('mouseenter', function (e) {
          const bookingNumber = this.dataset.bookingNumber;
          const department = this.dataset.department;
          const shiftName = this.dataset.shiftName;
          const startTime = this.dataset.startTime ? this.dataset.startTime.substring(0, 5) : ''; // Format HH:MM
          const endTime = this.dataset.endTime ? this.dataset.endTime.substring(0, 5) : ''; // Format HH:MM

          tooltip.innerHTML = `
                  <div class="calendar-tooltip-title">${bookingNumber}</div>
                  <div class="calendar-tooltip-content">
                    <div>Department: ${department}</div>
                    <div>Shift: ${shiftName}</div>
                    <div>Time: ${startTime} - ${endTime}</div>
                  </div>
                `;

          // Position tooltip near the cursor
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY + 10) + 'px';
          tooltip.style.display = 'block';
        });

        card.addEventListener('mouseleave', function () {
          tooltip.style.display = 'none';
        });
      });

      // Add event listeners to maintenance cards
      document.querySelectorAll('.maintenance-card').forEach(card => {
        card.addEventListener('mouseenter', function (e) {
          const title = this.dataset.maintenanceTitle;
          const shiftName = this.dataset.shiftName;
          const startTime = this.dataset.startTime ? this.dataset.startTime.substring(0, 5) : ''; // Format HH:MM
          const endTime = this.dataset.endTime ? this.dataset.endTime.substring(0, 5) : ''; // Format HH:MM

          tooltip.innerHTML = `
                  <div class="calendar-tooltip-title">Maintenance</div>
                  <div class="calendar-tooltip-content">
                    <div>Title: ${title}</div>
                    <div>Shift: ${shiftName}</div>
                    <div>Time: ${startTime} - ${endTime}</div>
                  </div>
                `;

          // Position tooltip near the cursor
          tooltip.style.left = (e.pageX + 10) + 'px';
          tooltip.style.top = (e.pageY + 10) + 'px';
          tooltip.style.display = 'block';
        });

        card.addEventListener('mouseleave', function () {
          tooltip.style.display = 'none';
        });
      });
    }

    // Fungsi untuk navigasi antar minggu
    function navigateWeek(weeks) {
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Reset time for accurate comparison
      const newDate = addDays(currentDate, weeks * 7);

      if (weeks < 0 && newDate < today) {
        return; // Prevent navigating to past weeks
      }

      currentDate = newDate;
      updateDateHeaders();

      // Fetch calendar data with new date range
      fetchCalendarData();

      // Update prev button state
      const prevButton = document.getElementById('prevWeek');
      prevButton.disabled = currentDate <= today;

      // Reset scroll position ke awal (paling kiri)
      const scrollContainer = document.querySelector('.calendar-scroll-container');
      scrollContainer.scrollLeft = 0;
    }
  </script>
}
