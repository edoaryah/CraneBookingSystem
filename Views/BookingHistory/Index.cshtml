@model AspnetCoreMvcFull.ViewModels.BookingManagement.BookingHistoryViewModel
@{
  ViewData["Title"] = "Booking History";
  Layout = "_ContentNavbarLayout";
}

<!-- Hoverable Table rows -->
<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Booking History</h5>
    <a href="/BookingForm" class="btn btn-primary">
      <i class="bx bx-plus me-1"></i> New Booking
    </a>
  </div>

  <!-- Hidden input for crane data -->
  <input type="hidden" id="craneData" value="@System.Text.Json.JsonSerializer.Serialize(Model.AvailableCranes)" />

  <!-- Loading indicator -->
  <div id="loadingIndicator" class="text-center py-5">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
    <p class="mt-2">Loading booking history...</p>
  </div>

  <!-- Booking history table -->
  <div class="table-responsive text-nowrap" id="bookingTableContainer" style="display: none;">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Department</th>
          <th>Date</th>
          <th>Crane</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody class="table-border-bottom-0" id="bookingTableBody">
        <!-- Will be filled dynamically -->
      </tbody>
    </table>
  </div>

  <!-- No data message -->
  <div id="noDataMessage" class="text-center py-5" style="display: none;">
    <i class="bx bx-calendar-x text-secondary mb-2" style="font-size: 3rem;"></i>
    <p class="mb-0">No booking history found</p>
  </div>

  <!-- Error message -->
  <div id="errorMessage" class="alert alert-danger mx-4 mb-4" style="display: none;">
    An error occurred while loading booking history. Please try again later.
  </div>
</div>
<!--/ Hoverable Table rows -->

@section PageScripts {
  <script>
    // DOM Elements
    const loadingIndicator = document.getElementById('loadingIndicator');
    const bookingTableContainer = document.getElementById('bookingTableContainer');
    const bookingTableBody = document.getElementById('bookingTableBody');
    const noDataMessage = document.getElementById('noDataMessage');
    const errorMessage = document.getElementById('errorMessage');

    // Global variables
    let bookings = [];
    let cranes = [];

    // Initialize when the DOM is loaded
    document.addEventListener('DOMContentLoaded', function () {
      // Get crane data from hidden input
      const craneDataInput = document.getElementById('craneData');
      if (craneDataInput && craneDataInput.value) {
        try {
          cranes = JSON.parse(craneDataInput.value);
          console.log('Loaded cranes from ViewModel:', cranes);
        } catch (error) {
          console.error('Error parsing crane data:', error);
        }
      }

      // Load booking history
      loadBookingHistory();
    });

    // Function to load booking history
    async function loadBookingHistory() {
      showLoading();

      try {
        // Fetch bookings
        const bookingsResponse = await fetch('/api/Bookings');

        if (!bookingsResponse.ok) {
          throw new Error('Failed to fetch booking data');
        }

        bookings = await bookingsResponse.json();

        // Map cranes by ID for easier lookup
        const craneMap = {};
        cranes.forEach(crane => {
          const id = crane.Id || crane.id; // Handle both PascalCase and camelCase
          craneMap[id] = crane;
        });

        // Sort bookings by start date (newest first)
        bookings.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));

        if (bookings.length === 0) {
          showNoData();
          return;
        }

        // Render the table
        bookingTableBody.innerHTML = '';

        bookings.forEach(booking => {
          const row = document.createElement('tr');

          // Format dates
          const startDate = new Date(booking.startDate);
          const endDate = new Date(booking.endDate);
          const formattedStartDate = formatDate(startDate);
          const formattedEndDate = formatDate(endDate);
          const dateRange = `${formattedStartDate} - ${formattedEndDate}`;

          // Get crane code - Use either craneId or CraneId (case sensitivity fix)
          const craneId = booking.craneId || booking.CraneId;
          const crane = craneMap[craneId];
          const craneCode = crane ? (crane.Code || crane.code) : 'Unknown';

          // Populate row
          row.innerHTML = `
                  <td>${booking.bookingNumber}</td>
                  <td>${booking.name}</td>
                  <td>${booking.department}</td>
                  <td>${dateRange}</td>
                  <td>${craneCode}</td>
                  <td>
                    <div class="dropdown">
                      <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                        <i class="bx bx-dots-vertical-rounded"></i>
                      </button>
                      <div class="dropdown-menu">
                        <a class="dropdown-item" href="/BookingHistory/Details/${booking.id}">
                          <i class="bx bx-show-alt me-1"></i> View Details
                        </a>
                        <a class="dropdown-item" href="/CraneUsage/Index/${booking.id}">
                          <i class="bx bx-time me-1"></i> Crane Usage
                        </a>
                        <a class="dropdown-item" href="javascript:void(0);" onclick="event.stopPropagation();">
                          <i class="bx bx-edit-alt me-1"></i> Edit
                        </a>
                        <a class="dropdown-item" href="javascript:void(0);" onclick="event.stopPropagation();">
                          <i class="bx bx-trash me-1"></i> Delete
                        </a>
                      </div>
                    </div>
                  </td>
                `;

          // Add click event to the entire row
          row.style.cursor = 'pointer';
          row.addEventListener('click', function (e) {
            // Only navigate if we didn't click inside the dropdown or dropdown toggle button
            if (
              !e.target.closest('.dropdown') &&
              !e.target.closest('.dropdown-menu') &&
              !e.target.closest('.dropdown-toggle')
            ) {
              window.location.href = `/BookingHistory/Details/${booking.id}`;
            }
          });

          bookingTableBody.appendChild(row);
        });

        showTable();
      } catch (error) {
        console.error('Error loading booking history:', error);
        showError();
      }
    }

    // Format date to DD-MM-YYYY
    function formatDate(date) {
      const day = date.getDate().toString().padStart(2, '0');
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const year = date.getFullYear();
      return `${day}-${month}-${year}`;
    }

    // UI helper functions
    function showLoading() {
      loadingIndicator.style.display = 'block';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'none';
    }

    function showTable() {
      loadingIndicator.style.display = 'none';
      bookingTableContainer.style.display = 'block';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'none';
    }

    function showNoData() {
      loadingIndicator.style.display = 'none';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'block';
      errorMessage.style.display = 'none';
    }

    function showError() {
      loadingIndicator.style.display = 'none';
      bookingTableContainer.style.display = 'none';
      noDataMessage.style.display = 'none';
      errorMessage.style.display = 'block';
    }
  </script>
}
