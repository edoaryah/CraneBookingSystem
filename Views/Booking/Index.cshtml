@model AspnetCoreMvcFull.ViewModels.BookingManagement.BookingFormViewModel
@{
  ViewData["Title"] = "Crane Booking Form";
  Layout = "_ContentNavbarLayout";
}

@section PageStyles {
  <style>
    .required-label:after {
      content: " *";
      color: red;
    }

    .hazard-checkbox {
      margin-right: 5px;
    }

    .form-section {
      margin-bottom: 2rem;
    }

    .form-section-title {
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #ddd;
    }

    /* CSS untuk menjadikan kolom tombol trash fit content */
    #itemsTableContainer .table th:last-child,
    #itemsTableContainer .table td:last-child {
      white-space: nowrap !important;
      padding-right: 20px;
    }

    #itemsTableContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    #itemsTableContainer .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    /* Pastikan semua sel tabel memiliki border yang konsisten */
    #itemsTableContainer .table th,
    #itemsTableContainer .table td {
      border-color: rgba(0, 0, 0, 0.125);
    }

    /* CSS untuk Shift Selection table - mirip dengan items table */
    #shiftTableContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    #shiftTableContainer .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    /* Pastikan semua sel tabel memiliki border yang konsisten */
    #shiftTableContainer .table th,
    #shiftTableContainer .table td {
      border-color: rgba(0, 0, 0, 0.125);
    }

    /* Menambahkan CSS untuk center align kolom shift */
    #shiftTableContainer .table th:not(:first-child),
    #shiftTableContainer .table td:not(:first-child) {
      text-align: center;
    }

    /* Memastikan checkbox dalam tabel juga di tengah */
    #shiftTableContainer .form-check {
      display: flex;
      justify-content: center;
      margin: 0;
    }

    /* CSS for Hazards Card - matching Items Table style */
    #hazardsCardContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
      padding: 20px;
    }

    /* Add some better spacing for hazard checkboxes */
    .hazard-checkbox {
      margin-right: 5px;
    }

    /* Add some breathing room between rows of checkboxes */
    #hazardsContainer .col-md-4 {
      margin-bottom: 10px;
    }
  </style>
}

<div class="row">
  <div class="col-12">
    <div class="card mb-4">
      <!-- Replace your current card-header with this -->
      <div class="card-header">
        <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-md-center">
          <h5 class="mb-0">Crane Booking Form</h5>
          <small class="text-muted mt-1 mt-md-0">All fields marked with * are required</small>
        </div>
      </div>
      <div class="card-body">
        <form id="craneBookingForm">

          <!-- Hidden fields for user data -->
          <input type="hidden" id="userName" value="@ViewData["UserName"]" />
          <input type="hidden" id="userDepartment" value="@ViewData["UserDepartment"]" />
          <!-- Hidden field to store shift definitions -->
          <input type="hidden" id="shiftDefinitionsData"
            value="@System.Text.Json.JsonSerializer.Serialize(Model.ShiftDefinitions)" />

          <!-- Requestor Information Section -->
          <div class="form-section">
            <h6 class="form-section-title">Requestor Information</h6>
            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label class="form-label required-label">Requestor Name</label>
                <input id="name" name="name" class="form-control" required readonly />
                <small class="text-muted">Automatically filled based on your login information</small>
              </div>
              <div class="col-md-6">
                <label class="form-label required-label">Department Name</label>
                <input id="department" name="department" class="form-control" required readonly />
                <small class="text-muted">Automatically filled based on your login information</small>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label class="form-label required-label">Supervisor Name</label>
                <input id="projectSupervisor" name="projectSupervisor" class="form-control" required />
              </div>
              <div class="col-md-6">
                <label class="form-label required-label">Phone Number</label>
                <input id="phoneNumber" name="phoneNumber" class="form-control" placeholder="e.g. 081242005757" required
                  type="tel" pattern="[0-9]*" inputmode="numeric"
                  oninput="this.value = this.value.replace(/[^0-9]/g, '');" />
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label required-label">Cost Code</label>
                <input id="costCode" name="costCode" class="form-control" required />
              </div>
            </div>
          </div>

          <!-- Booking Details Section -->
          <div class="form-section">
            <h6 class="form-section-title">Booking Details</h6>
            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label for="startDate" class="form-label required-label">Start Date</label>
                <input type="date" id="startDate" name="startDate" class="form-control" required />
                <span class="text-danger" id="startDateError"></span>
              </div>
              <div class="col-md-6">
                <label for="endDate" class="form-label required-label">End Date</label>
                <input type="date" id="endDate" name="endDate" class="form-control" required />
                <span class="text-danger" id="endDateError"></span>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label class="form-label required-label">Crane</label>
                <select id="craneId" name="craneId" class="form-select" required>
                  <option value="">Select a Crane</option>
                  @foreach (var crane in Model.AvailableCranes)
                  {
                    if (crane.Status == AspnetCoreMvcFull.Models.CraneStatus.Available)
                    {
                      <option value="@crane.Id">@crane.Code (@crane.Capacity ton)</option>
                    }
                    else
                    {
                      <option value="@crane.Id" disabled>@crane.Code (@crane.Capacity ton) - Under Maintenance</option>
                    }
                  }
                </select>
              </div>
              <div class="col-md-6">
                <label class="form-label required-label">Location</label>
                <input id="location" name="location" class="form-control" required />
              </div>
            </div>

            <!-- Shift Selection Table - Using newer template -->
            <div class="row mb-3">
              <div class="col-12">
                <label id="shiftLabel" class="form-label required-label" style="display: none;">Shift Selections</label>
                <div id="shiftTableContainer" class="card" style="display: none;">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                      <thead class="table-border-top-0">
                        <tr>
                          <th>Date</th>
                          @foreach (var shift in Model.ShiftDefinitions.Where(s => s.IsActive).OrderBy(s =>
                                                    s.StartTime))
                          {
                            <th data-shift-id="@shift.Id" data-shift-name="@shift.Name"
                              data-shift-start="@shift.FormattedStartTime" data-shift-end="@shift.FormattedEndTime"
                              data-shift-is-active="@shift.IsActive.ToString().ToLower()">
                              @shift.Name<br /><small class="text-muted">@shift.TimeRange</small>
                            </th>
                          }
                        </tr>
                      </thead>
                      <tbody class="table-border-bottom-0" id="shiftTableBody">
                        <!-- Shift rows will be added dynamically -->
                      </tbody>
                    </table>
                  </div>
                </div>
                <span class="text-danger" id="shiftTableError"></span>
              </div>
            </div>
            <!-- Spacer div that shows when shift table is hidden -->
            <div id="spacerDiv" class="mb-3" style="display: block;"></div>
          </div>

          <!-- Job Details Section -->
          <div class="form-section">
            <h6 class="form-section-title">Job Details</h6>
            <div class="row mb-3">
              <div class="col-12">
                <label class="form-label required-label">Job Description</label>
                <textarea id="description" name="description" class="form-control" rows="3" required></textarea>
              </div>
            </div>

            <!-- Items to be Lifted Table - Kolom tombol trash fit content -->
            <div class="row mb-3">
              <div class="col-12">
                <label class="form-label required-label">Items to be Lifted</label>
                <div id="itemsTableContainer" class="card">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                      <thead class="table-border-top-0">
                        <tr>
                          <th style="width: 40%; min-width: 220px; padding-right: 5px;">Item Name (p x l x t)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Height of Lifting (m)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Weight (ton)</th>
                          <th style="width: 15%; min-width: 140px; padding-right: 5px;">Quantity</th>
                          <th style="width: 1%; white-space: nowrap;"></th>
                        </tr>
                      </thead>
                      <tbody id="liftedItemsBody">
                        <!-- The rows will be added by JavaScript on page load -->
                      </tbody>
                      <tfoot class="table-border-bottom-0">
                        <tr>
                          <th>
                            <button type="button" id="addItemBtn" class="btn btn-outline-primary btn-sm">
                              <i class="bx bx-plus"></i> Add Another Item
                            </button>
                          </th>
                        </tr>
                      </tfoot>
                    </table>
                  </div>
                </div>
                <span class="text-danger" id="liftedItemsError"></span>
              </div>
            </div>

            <!-- Replace the current hazards section with this code -->
            <div class="row mb-3">
              <div class="col-12 mb-6">
                <label class="form-label required-label">Potential Hazards</label>
                <div id="hazardsCardContainer" class="card">
                  <div class="table-responsive">
                    <div id="hazardsContainer" class="row">
                      <!-- Hazards will be loaded dynamically -->
                    </div>

                    <div class="custom-hazard">
                      <label class="form-label">Custom Hazard (Optional)</label>
                      <input id="customHazard" name="customHazard" class="form-control"
                        placeholder="Specify any other hazards not listed above" />
                    </div>
                  </div>
                </div>
                <span class="text-danger" id="hazardsError"></span>
              </div>
            </div>

            <!-- Terms and Submission Section -->
            <div class="form-section">
              <h6 class="form-section-title">Requirements</h6>
              <div class="row mb-6">
                <div class="col-12">
                  <div class="form-check mb-2">
                    <input id="termsAgreement1" class="form-check-input" type="checkbox" required />
                    <label class="form-check-label required-label" for="termsAgreement1">
                      Pengguna harus menyiapkan akses yang aman ke area kerja dan tempat kerja yang aman. Untuk bekerja
                      pada malam hari, pengguna harus menyediakan penerangan yang cukup memadahi.
                    </label>
                  </div>
                  <div class="form-check mb-2">
                    <input id="termsAgreement2" class="form-check-input" type="checkbox" required />
                    <label class="form-check-label required-label" for="termsAgreement2">
                      Penguna harus melengkapi izin yang sudah disetujui. Misalnya izin bekerja di dekat saluran
                      listrik,
                      Akses PIT dll dan pengguna harus memandu bila diperlukan untuk ke lokasi pekerjaan dan
                      membantu mengawasi pekerjaan yang sedang berlangsung dan juga pengguna harus menginformasikan
                      secara
                      tertulis jika ada perubahan akses atau jalur yang akan dilalui.
                    </label>
                  </div>
                  <div class="form-check">
                    <input id="termsAgreement3" class="form-check-input" type="checkbox" required />
                    <label class="form-check-label required-label" for="termsAgreement3">
                      Hanya pekerjaan yang sesuai denga persyaratan yang akan diproses.
                    </label>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-12 d-flex justify-content-between">
                  <a href="/Calendar" class="btn btn-secondary">Cancel</a>
                  <button type="button" id="submitButton" class="btn btn-primary">Submit Booking</button>
                </div>
              </div>
            </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Success modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="successModalLabel">Booking Successful</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Your crane booking has been submitted successfully!
      </div>
      <div class="modal-footer">
        <a href="/Calendar/Index" class="btn btn-primary">Go to Calendar</a>
      </div>
    </div>
  </div>
</div>

<!-- Error modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="errorModalLabel">Booking Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="errorModalBody">
        An error occurred while submitting your booking.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <script>
    // Global variables for data
    let shiftDefinitions = [];

    // DOM Elements - with validation checks
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const shiftTableContainer = document.getElementById('shiftTableContainer');
    const shiftTableBody = document.getElementById('shiftTableBody');
    const submitButton = document.getElementById('submitButton');
    const craneIdSelect = document.getElementById('craneId');
    const hazardsContainer = document.getElementById('hazardsContainer');
    const addItemBtn = document.getElementById('addItemBtn');
    const shiftLabel = document.getElementById('shiftLabel');
    const spacerDiv = document.getElementById('spacerDiv');

    // Log any missing critical elements
    if (!shiftTableContainer || !shiftTableBody || !shiftLabel || !spacerDiv) {
      console.error('Critical DOM elements for shift table missing:', {
        shiftTableContainer: !!shiftTableContainer,
        shiftTableBody: !!shiftTableBody,
        shiftLabel: !!shiftLabel,
        spacerDiv: !!spacerDiv
      });
    }

    // Set min date to today
    const today = new Date();
    const formattedToday = today.toISOString().split('T')[0];

    if (startDateInput) {
      startDateInput.min = formattedToday;
      startDateInput.addEventListener('change', generateShiftTable);
    }

    if (endDateInput) {
      endDateInput.min = formattedToday;
      endDateInput.addEventListener('change', generateShiftTable);
    }

    // Set user data from ViewData
    function setUserData() {
      // Get values from hidden inputs
      const userName = document.getElementById('userName')?.value || '';
      const userDepartment = document.getElementById('userDepartment')?.value || '';

      // Set values to form fields
      const nameInput = document.getElementById('name');
      const departmentInput = document.getElementById('department');

      if (nameInput) nameInput.value = userName;
      if (departmentInput) departmentInput.value = userDepartment;

      console.log('User data set:', { userName, userDepartment });
    }

    // Load shift definitions from the hidden input or from table headers
    function loadShiftDefinitions() {
      try {
        // First try to load from the hidden input
        const shiftDefinitionsInput = document.getElementById('shiftDefinitionsData');
        if (shiftDefinitionsInput && shiftDefinitionsInput.value) {
          console.log('Loading shift definitions from hidden input');
          shiftDefinitions = JSON.parse(shiftDefinitionsInput.value);
          console.log('Loaded shift definitions from input:', shiftDefinitions);
          return true;
        }

        // If hidden input doesn't exist or is empty, try loading from table headers
        console.log('Loading shift definitions from table headers');
        const shiftHeaders = document.querySelectorAll('#shiftTableContainer thead th[data-shift-id]');

        if (shiftHeaders && shiftHeaders.length > 0) {
          console.log('Found shift headers in table:', shiftHeaders.length);
          shiftDefinitions = Array.from(shiftHeaders).map(header => {
            return {
              id: parseInt(header.dataset.shiftId),
              name: header.dataset.shiftName,
              formattedStartTime: header.dataset.shiftStart,
              formattedEndTime: header.dataset.shiftEnd,
              timeRange: `${header.dataset.shiftStart} - ${header.dataset.shiftEnd}`,
              isActive: header.dataset.shiftIsActive === 'true'
            };
          });
          console.log('Loaded shift definitions from table headers:', shiftDefinitions);
          return true;
        }

        console.error('Could not load shift definitions from either source');
        return false;
      } catch (error) {
        console.error('Error loading shift definitions:', error);
        return false;
      }
    }

    // Validation functions
    function validateDates() {
      if (!startDateInput || !endDateInput) {
        console.error('Date inputs not found');
        return false;
      }

      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);
      const startDateError = document.getElementById('startDateError');
      const endDateError = document.getElementById('endDateError');

      if (startDateError) startDateError.textContent = '';
      if (endDateError) endDateError.textContent = '';

      if (!startDateInput.value) {
        if (startDateError) startDateError.textContent = 'Start date is required';
        return false;
      }

      if (!endDateInput.value) {
        if (endDateError) endDateError.textContent = 'End date is required';
        return false;
      }

      if (startDate > endDate) {
        if (endDateError) endDateError.textContent = 'End date cannot be before start date';
        return false;
      }

      return true;
    }

    // Function to generate shift table
    function generateShiftTable() {
      console.log('generateShiftTable called');

      // Verify elements exist
      if (!shiftTableContainer || !shiftLabel || !spacerDiv || !startDateInput || !endDateInput) {
        console.error('Critical DOM elements missing for generateShiftTable');
        return;
      }

      // Check if both dates are selected
      const startDate = startDateInput.value;
      const endDate = endDateInput.value;

      if (!startDate || !endDate) {
        console.log('Dates not selected, hiding table');
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        spacerDiv.style.display = 'block';
        return;
      }

      console.log('Dates selected:', { startDate, endDate });

      if (!validateDates()) {
        console.log('Dates validation failed');
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        spacerDiv.style.display = 'block';
        return;
      }

      // Make sure we have shift definitions
      if (!shiftDefinitions || shiftDefinitions.length === 0) {
        console.log('No shift definitions, trying to load');
        if (!loadShiftDefinitions()) {
          console.error('Failed to load shift definitions');
          return;
        }
      }

      // Check active shifts
      const activeShifts = shiftDefinitions.filter(s =>
        // Check both IsActive and isActive (capital I and lowercase i)
        s.IsActive === true || s.isActive === true
      );

      console.log('Active shifts found:', activeShifts.length);

      // Generate dates between start and end date
      const start = new Date(startDate);
      const end = new Date(endDate);
      const dateArray = [];

      // Loop through the dates
      let currentDate = new Date(start);
      while (currentDate <= end) {
        dateArray.push({
          date: new Date(currentDate).toISOString().split('T')[0],
          selectedShiftIds: []
        });
        currentDate.setDate(currentDate.getDate() + 1);
      }

      console.log(`Generated ${dateArray.length} days for shift table`);

      // Make sure the table container is visible
      shiftTableContainer.style.display = 'block';
      shiftLabel.style.display = 'block';
      spacerDiv.style.display = 'none';

      // We'll use the shift table that's already in the DOM
      // But we need to populate the body with the dates
      renderShiftTableBody(dateArray);
    }

    function renderShiftTableBody(shiftTable) {
      console.log('renderShiftTableBody called with', shiftTable.length, 'days');

      if (!shiftTableBody) {
        console.error('shiftTableBody element not found');
        return;
      }

      // Clear existing table body
      shiftTableBody.innerHTML = '';

      // PERUBAHAN DISINI: Find active shifts with case-insensitive property checking
      const activeShifts = shiftDefinitions.filter(s =>
        s.IsActive === true || s.isActive === true
      );

      // Add rows for each date
      shiftTable.forEach((dayShift, index) => {
        const dateObj = new Date(dayShift.date);
        const formattedDate = dateObj.toLocaleDateString('en-US', {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });

        const row = document.createElement('tr');
        row.dataset.date = dayShift.date;

        // Add date cell
        const dateCell = document.createElement('td');
        dateCell.textContent = formattedDate;
        row.appendChild(dateCell);

        // Add checkboxes for each active shift definition
        activeShifts.forEach(shift => {
          // PERUBAHAN DISINI: Make sure we get the id correctly, checking both Id and id
          const shiftId = shift.Id || shift.id;
          const isSelected = dayShift.selectedShiftIds.includes(shiftId);

          const cell = document.createElement('td');
          cell.innerHTML = `
              <div class="form-check d-flex justify-content-center">
                <input type="checkbox" class="form-check-input shift-checkbox"
                  id="shift-${shiftId}-${dayShift.date}"
                  data-date="${dayShift.date}"
                  data-shift-id="${shiftId}"
                  ${isSelected ? 'checked' : ''} />
              </div>
            `;

          row.appendChild(cell);
        });

        shiftTableBody.appendChild(row);
      });

      console.log('Shift table body rendered successfully');

      // Add event listeners to checkboxes for conflict checking
      const shiftCheckboxes = document.querySelectorAll('.shift-checkbox');
      shiftCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function () {
          checkShiftConflict(this);
        });
      });
    }

    // Function to check for shift conflicts with the API
    async function checkShiftConflict(checkbox) {
      if (!checkbox || !craneIdSelect) {
        console.error('Required elements missing for checkShiftConflict');
        return;
      }

      const craneId = craneIdSelect.value;
      if (!craneId) return;

      const date = checkbox.dataset.date;
      const shiftId = parseInt(checkbox.dataset.shiftId);
      const isChecked = checkbox.checked;

      // Only check if the checkbox is being checked (not unchecked)
      if (isChecked) {
        try {
          const response = await fetch(
            `/api/Bookings/CheckShiftConflict?craneId=${craneId}&date=${date}&shiftDefinitionId=${shiftId}`
          );

          if (!response.ok) {
            throw new Error('Failed to check conflict');
          }

          const hasConflict = await response.json();

          if (hasConflict) {
            // Find shift name for better error message
            const shiftName = shiftDefinitions.find(s => s.id === shiftId)?.name || `Shift ${shiftId}`;
            alert(
              `There is already a booking for this crane on ${new Date(date).toLocaleDateString()} during ${shiftName}. Please select a different shift or crane.`
            );
            checkbox.checked = false;
            return;
          }

          // Then check conflict with other maintenance schedules
          const maintenanceResponse = await fetch(
            `/api/MaintenanceSchedules/CheckShiftConflict?craneId=${craneId}&date=${date}&shiftDefinitionId=${shiftId}`
          );

          if (!maintenanceResponse.ok) {
            throw new Error('Failed to check maintenance conflict');
          }

          const hasMaintenanceConflict = await maintenanceResponse.json();

          if (hasMaintenanceConflict) {
            // Find shift name for better error message
            const shiftName = shiftDefinitions.find(s => s.id === shiftId)?.name || `Shift ${shiftId}`;
            alert(
              `There is already a maintenance schedule for this crane on ${new Date(date).toLocaleDateString()} during ${shiftName}. Please select a different shift or crane.`
            );
            checkbox.checked = false;
          }
        } catch (error) {
          console.error('Error checking conflict:', error);
        }
      }
    }

    // Initialize the lifted items table with one row
    function initLiftedItemsTable() {
      const tbody = document.getElementById('liftedItemsBody');
      if (!tbody) {
        console.error('liftedItemsBody element not found');
        return;
      }

      tbody.innerHTML = ''; // Clear existing rows
      addLiftedItemRow();
    }

    // Add a new row to the lifted items table with button column fit content
    function addLiftedItemRow() {
      const tbody = document.getElementById('liftedItemsBody');
      if (!tbody) {
        console.error('liftedItemsBody element not found');
        return;
      }

      const rowIndex = tbody.rows.length;

      const row = document.createElement('tr');

      row.innerHTML = `
                <td style="min-width: 220px; padding-right: 5px;">
                  <input type="text" class="form-control item-name" required />
                </td>
                <td style="min-width: 140px; padding-right: 5px;">
                  <input type="number" class="form-control item-height"
                        min="0.01" step="0.01" required />
                </td>
                <td style="min-width: 140px; padding-right: 5px;">
                  <input type="number" class="form-control item-weight"
                        min="0.01" step="0.01" required />
                </td>
                <td style="min-width: 140px; padding-right: 5px;">
                  <input type="number" class="form-control item-quantity"
                        min="1" step="1" value="1" required />
                </td>
                <td style="width: 1%; white-space: nowrap;">
                  <button type="button" class="btn btn-outline-danger btn-sm remove-item-btn">
                    <i class="bx bx-trash"></i>
                  </button>
                </td>
              `;

      // Add event listener to remove button
      const removeBtn = row.querySelector('.remove-item-btn');
      removeBtn.addEventListener('click', function () {
        // Don't allow removing if it's the only row
        if (tbody.rows.length > 1) {
          row.remove();
        } else {
          alert('At least one item is required.');
        }
      });

      tbody.appendChild(row);
    }

    // Fetch hazards from API
    async function loadHazards() {
      try {
        const response = await fetch('/api/Hazards');
        if (!response.ok) {
          throw new Error('Failed to load hazards');
        }

        const hazards = await response.json();
        console.log('Hazards loaded:', hazards.length);
        populateHazardsCheckboxes(hazards);
      } catch (error) {
        console.error('Error loading hazards:', error);
        alert('Failed to load hazard data. Please refresh the page or contact support.');
      }
    }

    // Populate hazards checkboxes
    function populateHazardsCheckboxes(hazards) {
      if (!hazardsContainer) {
        console.error('hazardsContainer element not found');
        return;
      }

      hazardsContainer.innerHTML = '';

      hazards.forEach(hazard => {
        const col = document.createElement('div');
        col.className = 'col-md-4 mb-2';

        col.innerHTML = `
                  <div class="form-check">
                    <input class="form-check-input hazard-checkbox" type="checkbox"
                          name="hazard-${hazard.id}"
                          id="hazard-${hazard.id}"
                          value="${hazard.id}" />
                    <label class="form-check-label" for="hazard-${hazard.id}">
                      ${hazard.name}
                    </label>
                  </div>
                `;

        hazardsContainer.appendChild(col);
      });
    }

    // Function to collect form data
    function collectFormData() {
      // Basic form data
      const formData = {
        name: document.getElementById('name')?.value || '',
        department: document.getElementById('department')?.value || '',
        craneId: parseInt(document.getElementById('craneId')?.value || '0'),
        startDate: document.getElementById('startDate')?.value ?
          new Date(document.getElementById('startDate').value).toISOString() : '',
        endDate: document.getElementById('endDate')?.value ?
          new Date(document.getElementById('endDate').value).toISOString() : '',
        location: document.getElementById('location')?.value || '',
        projectSupervisor: document.getElementById('projectSupervisor')?.value || '',
        costCode: document.getElementById('costCode')?.value || '',
        phoneNumber: document.getElementById('phoneNumber')?.value || '',
        description: document.getElementById('description')?.value || '',
        customHazard: document.getElementById('customHazard')?.value || null
      };

      // Collect shift selections
      formData.shiftSelections = [];
      if (shiftTableBody) {
        const shiftRows = shiftTableBody.querySelectorAll('tr');

        shiftRows.forEach(row => {
          const dateStr = row.dataset.date;
          const checkboxes = row.querySelectorAll('.shift-checkbox:checked');

          if (checkboxes.length > 0) {
            const selectedShiftIds = Array.from(checkboxes).map(checkbox => parseInt(checkbox.dataset.shiftId));

            formData.shiftSelections.push({
              date: new Date(dateStr).toISOString(),
              selectedShiftIds: selectedShiftIds
            });
          }
        });
      }

      // Collect items
      formData.items = [];
      const itemRows = document.querySelectorAll('#liftedItemsBody tr');

      itemRows.forEach(row => {
        const itemName = row.querySelector('.item-name')?.value || '';
        const height = parseFloat(row.querySelector('.item-height')?.value || '0');
        const weight = parseFloat(row.querySelector('.item-weight')?.value || '0');
        const quantity = parseInt(row.querySelector('.item-quantity')?.value || '0');

        if (itemName && !isNaN(height) && !isNaN(weight) && !isNaN(quantity)) {
          formData.items.push({
            itemName,
            height,
            weight,
            quantity
          });
        }
      });

      // Collect hazard IDs
      formData.hazardIds = [];
      const hazardCheckboxes = document.querySelectorAll('.hazard-checkbox:checked');

      hazardCheckboxes.forEach(checkbox => {
        formData.hazardIds.push(parseInt(checkbox.value));
      });

      return formData;
    }

    // Validate the form
    function validateForm() {
      let isValid = true;
      const shiftTableError = document.getElementById('shiftTableError');
      const hazardsError = document.getElementById('hazardsError');
      const liftedItemsError = document.getElementById('liftedItemsError');

      // Clear previous errors
      if (shiftTableError) shiftTableError.textContent = '';
      if (hazardsError) hazardsError.textContent = '';
      if (liftedItemsError) liftedItemsError.textContent = '';

      // Validate dates
      if (!validateDates()) {
        isValid = false;
      }

      // Validate crane selection
      if (!document.getElementById('craneId')?.value) {
        isValid = false;
      }

      // Validate shift table has at least one selection
      if (shiftTableContainer && shiftTableContainer.style.display === 'none') {
        if (shiftTableError) shiftTableError.textContent = 'Please select start and end dates to generate shifts';
        isValid = false;
      } else {
        // Check if at least one shift is selected
        const selectedShifts = document.querySelectorAll('.shift-checkbox:checked');
        if (selectedShifts.length === 0) {
          if (shiftTableError) shiftTableError.textContent = 'Please select at least one shift';
          isValid = false;
        }
      }

      // Validate items (at least one complete item)
      const items = document.querySelectorAll('#liftedItemsBody tr');
      let hasValidItem = false;

      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        const nameInput = item.querySelector('.item-name');
        const heightInput = item.querySelector('.item-height');
        const weightInput = item.querySelector('.item-weight');
        const quantityInput = item.querySelector('.item-quantity');

        if (nameInput?.value && heightInput?.value && weightInput?.value && quantityInput?.value) {
          hasValidItem = true;
          break;
        }
      }

      if (!hasValidItem) {
        if (liftedItemsError) liftedItemsError.textContent = 'Please provide at least one item to be lifted';
        isValid = false;
      }

      // Validate hazards
      const selectedHazards = document.querySelectorAll('.hazard-checkbox:checked');
      if (selectedHazards.length === 0) {
        if (hazardsError) hazardsError.textContent = 'Please select at least one potential hazard';
        isValid = false;
      }

      // Validate terms agreement
      const termsAgreement1 = document.getElementById('termsAgreement1');
      const termsAgreement2 = document.getElementById('termsAgreement2');
      const termsAgreement3 = document.getElementById('termsAgreement3');

      if (!termsAgreement1?.checked || !termsAgreement2?.checked || !termsAgreement3?.checked) {
        isValid = false;
      }

      return isValid;
    }

    // Submit booking
    async function submitBooking(formData) {
      console.log('Submitting booking with data:', formData);

      try {
        const response = await fetch('/api/Bookings', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
          // Handle error responses from the server
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to create booking');
        }

        // Show success modal
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));
        successModal.show();

        // Reset form after successful submission
        const bookingForm = document.getElementById('craneBookingForm');
        if (bookingForm) bookingForm.reset();

        if (shiftTableContainer) shiftTableContainer.style.display = 'none';
        initLiftedItemsTable();
      } catch (error) {
        console.error('Error submitting booking:', error);

        // Show error modal
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        const errorModalBody = document.getElementById('errorModalBody');
        if (errorModalBody) {
          errorModalBody.textContent = error.message || 'An error occurred while submitting your booking.';
        }
        errorModal.show();
      }
    }

    // Main initialization
    document.addEventListener('DOMContentLoaded', async function () {
      console.log('DOM fully loaded');

      // Set user data from ViewData
      setUserData();
      console.log('User data set');

      // Load shift definitions
      loadShiftDefinitions();

      // Load hazards for hazards checkboxes
      await loadHazards();

      // Initialize items table
      initLiftedItemsTable();

      // Set default dates
      if (startDateInput) {
        startDateInput.value = formattedToday;
      }

      if (endDateInput) {
        const tomorrow = new Date();
        tomorrow.setDate(today.getDate() + 1);
        endDateInput.value = tomorrow.toISOString().split('T')[0];
      }

      // Generate shift table with a slight delay to ensure all data is ready
      setTimeout(() => {
        generateShiftTable();
      }, 100);

      // Add event listener for the submit button
      if (submitButton) {
        submitButton.addEventListener('click', function () {
          if (validateForm()) {
            const formData = collectFormData();
            submitBooking(formData);
          } else {
            // Scroll to the first error message
            const firstError = document.querySelector('.text-danger:not(:empty)');
            if (firstError) {
              firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        });
      }

      // Add event listener for the add item button
      if (addItemBtn) {
        addItemBtn.addEventListener('click', addLiftedItemRow);
      }
    });
  </script>
}
