@model AspnetCoreMvcFull.ViewModels.MaintenanceManagement.MaintenanceFormViewModel
@using System.Security.Claims
@{
  ViewData["Title"] = "Crane Maintenance Form";
  Layout = "_ContentNavbarLayout";

  var userName = User.FindFirst(ClaimTypes.Name)?.Value ?? "User";
  @* var userDepartment = User.FindFirst("department")?.Value ?? ""; *@
}

@section PageStyles {
  <style>
    .required-label:after {
      content: " *";
      color: red;
    }

    .form-section {
      margin-bottom: 2rem;
    }

    .form-section-title {
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #ddd;
    }

    /* CSS untuk Shift Selection table */
    #shiftTableContainer {
      box-shadow: none !important;
      border: 1px solid rgba(0, 0, 0, 0.125);
    }

    #shiftTableContainer .card-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }

    /* Pastikan semua sel tabel memiliki border yang konsisten */
    #shiftTableContainer .table th,
    #shiftTableContainer .table td {
      border-color: rgba(0, 0, 0, 0.125);
    }

    /* Menambahkan CSS untuk center align kolom shift */
    #shiftTableContainer .table th:not(:first-child),
    #shiftTableContainer .table td:not(:first-child) {
      text-align: center;
    }

    /* Memastikan checkbox dalam tabel juga di tengah */
    #shiftTableContainer .form-check {
      display: flex;
      justify-content: center;
      margin: 0;
    }
  </style>
}

<div class="row">
  <div class="col-12">
    <div class="card mb-4">
      <div class="card-header">
        <div class="d-flex flex-column flex-md-row justify-content-md-between align-items-md-center">
          <h5 class="mb-0">Crane Maintenance Form</h5>
          <small class="text-muted mt-1 mt-md-0">All fields marked with * are required</small>
        </div>
      </div>
      <div class="card-body">
        <form id="craneMaintenanceForm">

          <input type="hidden" id="shiftDefinitionsData"
            value="@System.Text.Json.JsonSerializer.Serialize(Model.ShiftDefinitions)" />

          <!-- Maintenance Information Section -->
          <div class="form-section">
            <h6 class="form-section-title">Maintenance Information</h6>
            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label class="form-label required-label">Created By</label>
                <input id="createdBy" name="createdBy" class="form-control" value="@userName" required readonly />
                <small class="text-muted">Automatically filled based on your login information</small>
              </div>
              <div class="col-md-6">
                <label class="form-label required-label">Title</label>
                <input id="title" name="title" class="form-control" required
                  placeholder="e.g. Monthly Preventive Maintenance" />
              </div>
            </div>
          </div>

          <!-- Maintenance Details Section -->
          <div class="form-section">
            <h6 class="form-section-title">Maintenance Details</h6>
            <div class="row mb-3">
              <div class="col-md-6 mb-3 mb-md-0">
                <label for="startDate" class="form-label required-label">Start Date</label>
                <input type="date" id="startDate" name="startDate" class="form-control" required />
                <span class="text-danger" id="startDateError"></span>
              </div>
              <div class="col-md-6">
                <label for="endDate" class="form-label required-label">End Date</label>
                <input type="date" id="endDate" name="endDate" class="form-control" required />
                <span class="text-danger" id="endDateError"></span>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label class="form-label required-label">Crane</label>
                <select id="craneId" name="craneId" class="form-select" required>
                  <option value="">Select a Crane</option>
                  @foreach (var crane in Model.AvailableCranes)
                  {
                    if (crane.Status == AspnetCoreMvcFull.Models.CraneStatus.Available)
                    {
                      <option value="@crane.Id">@crane.Code (@crane.Capacity ton)</option>
                    }
                    else
                    {
                      <option value="@crane.Id" disabled>@crane.Code (@crane.Capacity ton) - Under Maintenance</option>
                    }
                  }
                </select>
              </div>
            </div>

            <!-- Shift Selection Table -->
            <div class="row mb-3">
              <div class="col-12">
                <label id="shiftLabel" class="form-label required-label" style="display: none;">Shift Selections</label>
                <div id="shiftTableContainer" class="card" style="display: none;">
                  <div class="table-responsive text-nowrap">
                    <table class="table table-hover">
                      <thead class="table-border-top-0">
                        <tr>
                          <th>Date</th>
                          @foreach (var shift in Model.ShiftDefinitions.Where(s => s.IsActive).OrderBy(s =>
                                                    s.StartTime))
                          {
                            <th data-shift-id="@shift.Id" data-shift-name="@shift.Name"
                              data-shift-start="@shift.FormattedStartTime" data-shift-end="@shift.FormattedEndTime"
                              data-shift-is-active="@shift.IsActive.ToString().ToLower()">
                              @shift.Name<br /><small class="text-muted">@shift.TimeRange</small>
                            </th>
                          }
                        </tr>
                      </thead>
                      <tbody class="table-border-bottom-0" id="shiftTableBody">
                        <!-- Shift rows will be added dynamically -->
                      </tbody>
                    </table>
                  </div>
                </div>
                <span class="text-danger" id="shiftTableError"></span>
              </div>
            </div>
            <!-- Spacer div that shows when shift table is hidden -->
            <div id="spacerDiv" class="mb-3" style="display: block;"></div>
          </div>

          <!-- Maintenance Description Section -->
          <div class="form-section">
            <h6 class="form-section-title">Maintenance Description</h6>
            <div class="row mb-3">
              <div class="col-12">
                <label class="form-label required-label">Description</label>
                <textarea id="description" name="description" class="form-control" rows="4" required
                  placeholder="Describe the maintenance activities, procedures, and requirements..."></textarea>
              </div>
            </div>

            <div class="row">
              <div class="col-12 d-flex justify-content-between">
                <a href="/Calendar" class="btn btn-secondary">Cancel</a>
                <button type="button" id="submitButton" class="btn btn-primary">Submit Maintenance Schedule</button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Success modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="successModalLabel">Maintenance Schedule Successful</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        Your crane maintenance schedule has been submitted successfully!
      </div>
      <div class="modal-footer">
        <a href="/Calendar/Index" class="btn btn-primary">Go to Calendar</a>
      </div>
    </div>
  </div>
</div>

<!-- Error modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="errorModalLabel">Maintenance Schedule Error</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="errorModalBody">
        An error occurred while submitting your maintenance schedule.
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

@section PageScripts {
  <script>
    // Global variables for data
    let cranes = [];
    let shiftDefinitions = [];

    // DOM Elements - with validation checks
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const shiftTableContainer = document.getElementById('shiftTableContainer');
    const shiftTableBody = document.getElementById('shiftTableBody');
    const submitButton = document.getElementById('submitButton');
    const craneIdSelect = document.getElementById('craneId');
    const shiftLabel = document.getElementById('shiftLabel');
    const spacerDiv = document.getElementById('spacerDiv');

    // Set min date to today
    const today = new Date();
    const formattedToday = today.toISOString().split('T')[0];
    startDateInput.min = formattedToday;
    endDateInput.min = formattedToday;

    // Initially, don't set default date values
    startDateInput.value = '';
    endDateInput.value = '';

    // Load data on page load
    document.addEventListener('DOMContentLoaded', async function () {
      console.log('DOM fully loaded');

      // Load shift definitions
      loadShiftDefinitions();

      // Set default dates
      if (startDateInput) {
        startDateInput.value = formattedToday;
      }

      if (endDateInput) {
        const tomorrow = new Date();
        tomorrow.setDate(today.getDate() + 1);
        endDateInput.value = tomorrow.toISOString().split('T')[0];
      }

      // Generate shift table with a slight delay
      setTimeout(() => {
        generateShiftTable();
      }, 100);

      // Submit button click handler
      if (submitButton) {
        submitButton.addEventListener('click', function () {
          if (validateForm()) {
            const formData = collectFormData();
            submitMaintenanceSchedule(formData);
          } else {
            // Scroll to the first error message
            const firstError = document.querySelector('.text-danger:not(:empty)');
            if (firstError) {
              firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
          }
        });
      }
    });

    // Load shift definitions from the hidden input or from table headers
    function loadShiftDefinitions() {
      try {
        // First try to load from the hidden input
        const shiftDefinitionsInput = document.getElementById('shiftDefinitionsData');
        if (shiftDefinitionsInput && shiftDefinitionsInput.value) {
          console.log('Loading shift definitions from hidden input');
          shiftDefinitions = JSON.parse(shiftDefinitionsInput.value);
          console.log('Loaded shift definitions from input:', shiftDefinitions);
          return true;
        }

        // If hidden input doesn't exist or is empty, try loading from table headers
        console.log('Loading shift definitions from table headers');
        const shiftHeaders = document.querySelectorAll('#shiftTableContainer thead th[data-shift-id]');

        if (shiftHeaders && shiftHeaders.length > 0) {
          console.log('Found shift headers in table:', shiftHeaders.length);
          shiftDefinitions = Array.from(shiftHeaders).map(header => {
            return {
              id: parseInt(header.dataset.shiftId),
              name: header.dataset.shiftName,
              formattedStartTime: header.dataset.shiftStart,
              formattedEndTime: header.dataset.shiftEnd,
              timeRange: `${header.dataset.shiftStart} - ${header.dataset.shiftEnd}`,
              isActive: header.dataset.shiftIsActive === 'true'
            };
          });
          console.log('Loaded shift definitions from table headers:', shiftDefinitions);
          return true;
        }

        console.error('Could not load shift definitions from either source');
        return false;
      } catch (error) {
        console.error('Error loading shift definitions:', error);
        return false;
      }
    }

    // Validation functions
    function validateDates() {
      const startDate = new Date(startDateInput.value);
      const endDate = new Date(endDateInput.value);
      const startDateError = document.getElementById('startDateError');
      const endDateError = document.getElementById('endDateError');

      startDateError.textContent = '';
      endDateError.textContent = '';

      if (!startDateInput.value) {
        startDateError.textContent = 'Start date is required';
        return false;
      }

      if (!endDateInput.value) {
        endDateError.textContent = 'End date is required';
        return false;
      }

      if (startDate > endDate) {
        endDateError.textContent = 'End date cannot be before start date';
        return false;
      }

      return true;
    }

    function generateShiftTable() {
      console.log('generateShiftTable called');

      // Verify elements exist
      if (!shiftTableContainer || !shiftLabel || !spacerDiv || !startDateInput || !endDateInput) {
        console.error('Critical DOM elements missing for generateShiftTable');
        return;
      }

      // Check if both dates are selected
      const startDate = startDateInput.value;
      const endDate = endDateInput.value;

      if (!startDate || !endDate) {
        console.log('Dates not selected, hiding table');
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        spacerDiv.style.display = 'block';
        return;
      }

      console.log('Dates selected:', { startDate, endDate });

      if (!validateDates()) {
        console.log('Dates validation failed');
        shiftTableContainer.style.display = 'none';
        shiftLabel.style.display = 'none';
        spacerDiv.style.display = 'block';
        return;
      }

      // Make sure we have shift definitions
      if (!shiftDefinitions || shiftDefinitions.length === 0) {
        console.log('No shift definitions, trying to load');
        if (!loadShiftDefinitions()) {
          console.error('Failed to load shift definitions');
          return;
        }
      }

      // Check active shifts
      const activeShifts = shiftDefinitions.filter(s =>
        // Check both IsActive and isActive (capital I and lowercase i)
        s.IsActive === true || s.isActive === true
      );

      console.log('Active shifts found:', activeShifts.length);

      // Generate dates between start and end date
      const start = new Date(startDate);
      const end = new Date(endDate);
      const dateArray = [];

      // Loop through the dates
      let currentDate = new Date(start);
      while (currentDate <= end) {
        dateArray.push({
          date: new Date(currentDate).toISOString().split('T')[0],
          selectedShiftIds: []
        });
        currentDate.setDate(currentDate.getDate() + 1);
      }

      console.log(`Generated ${dateArray.length} days for shift table`);

      // Make sure the table container is visible
      shiftTableContainer.style.display = 'block';
      shiftLabel.style.display = 'block';
      spacerDiv.style.display = 'none';

      // We'll use the shift table that's already in the DOM
      // But we need to populate the body with the dates
      renderShiftTableBody(dateArray);
    }

    function renderShiftTableBody(shiftTable) {
      // Clear existing table body
      shiftTableBody.innerHTML = '';

      // Find active shifts dengan pemeriksaan case-insensitive property
      const activeShifts = shiftDefinitions.filter(s =>
        s.IsActive === true || s.isActive === true
      );

      // Add rows for each date
      shiftTable.forEach((dayShift, index) => {
        const dateObj = new Date(dayShift.date);
        const formattedDate = dateObj.toLocaleDateString('en-US', {
          weekday: 'short',
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });

        const row = document.createElement('tr');
        row.dataset.date = dayShift.date;

        // Add date cell
        const dateCell = document.createElement('td');
        dateCell.textContent = formattedDate;
        row.appendChild(dateCell);

        // Pastikan kita mendapatkan ID dengan benar
        activeShifts.forEach(shift => {
          const shiftId = shift.Id || shift.id;
          const isSelected = dayShift.selectedShiftIds.includes(shiftId);

          const cell = document.createElement('td');
          cell.innerHTML = `
              <div class="form-check d-flex justify-content-center">
                <input type="checkbox" class="form-check-input shift-checkbox"
                  id="shift-${shiftId}-${dayShift.date}"
                  data-date="${dayShift.date}"
                  data-shift-id="${shiftId}"
                  ${isSelected ? 'checked' : ''} />
              </div>
            `;

          row.appendChild(cell);
        });

        shiftTableBody.appendChild(row);
      });
    }

    async function checkShiftConflict(checkbox) {
      if (!checkbox || !craneIdSelect) {
        console.error('Required elements missing for checkShiftConflict');
        return;
      }

      const craneId = craneIdSelect.value;
      if (!craneId) return;

      const date = checkbox.dataset.date;
      const shiftId = parseInt(checkbox.dataset.shiftId);
      const isChecked = checkbox.checked;

      // Only check if the checkbox is being checked
      if (isChecked) {
        try {
          // Check conflict with bookings first
          const response = await fetch(
            `/api/Bookings/CheckShiftConflict?craneId=${craneId}&date=${date}&shiftDefinitionId=${shiftId}`
          );

          if (!response.ok) {
            throw new Error('Failed to check conflict');
          }

          const hasConflict = await response.json();

          if (hasConflict) {
            // Find shift name for better error message
            const shiftName = shiftDefinitions.find(s => (s.Id || s.id) === shiftId)?.name || `Shift ${shiftId}`;
            alert(
              `There is already a booking for this crane on ${new Date(date).toLocaleDateString()} during ${shiftName}. Please select a different shift or crane.`
            );
            checkbox.checked = false;
            return;
          }

          // Then check conflict with maintenance schedules
          const maintenanceResponse = await fetch(
            `/api/MaintenanceSchedules/CheckShiftConflict?craneId=${craneId}&date=${date}&shiftDefinitionId=${shiftId}`
          );

          if (!maintenanceResponse.ok) {
            throw new Error('Failed to check maintenance conflict');
          }

          const hasMaintenanceConflict = await maintenanceResponse.json();

          if (hasMaintenanceConflict) {
            const shiftName = shiftDefinitions.find(s => (s.Id || s.id) === shiftId)?.name || `Shift ${shiftId}`;
            alert(
              `There is already a maintenance schedule for this crane on ${new Date(date).toLocaleDateString()} during ${shiftName}. Please select a different shift or crane.`
            );
            checkbox.checked = false;
          }
        } catch (error) {
          console.error('Error checking conflict:', error);
        }
      }
    }

    // Auto-generate shift table when dates change
    startDateInput.addEventListener('change', generateShiftTable);
    endDateInput.addEventListener('change', generateShiftTable);

    // Regenerate shift table when crane changes to check for conflicts
    craneIdSelect.addEventListener('change', function () {
      if (startDateInput.value && endDateInput.value) {
        generateShiftTable();
      }
    });

    // Function to collect form data
    function collectFormData() {
      // Basic form data
      const formData = {
        craneId: parseInt(document.getElementById('craneId').value),
        title: document.getElementById('title').value,
        startDate: new Date(document.getElementById('startDate').value).toISOString(),
        endDate: new Date(document.getElementById('endDate').value).toISOString(),
        description: document.getElementById('description').value,
        createdBy: document.getElementById('createdBy').value
      };

      // Collect shift selections
      formData.shiftSelections = [];
      const shiftRows = shiftTableBody.querySelectorAll('tr');

      shiftRows.forEach(row => {
        const dateStr = row.dataset.date;
        const checkboxes = row.querySelectorAll('.shift-checkbox:checked');

        if (checkboxes.length > 0) {
          const selectedShiftIds = Array.from(checkboxes).map(checkbox => parseInt(checkbox.dataset.shiftId));

          formData.shiftSelections.push({
            date: new Date(dateStr).toISOString(),
            selectedShiftIds: selectedShiftIds
          });
        }
      });

      return formData;
    }

    // Validate the form
    function validateForm() {
      let isValid = true;
      const shiftTableError = document.getElementById('shiftTableError');

      // Clear previous errors
      shiftTableError.textContent = '';

      // Validate dates
      if (!validateDates()) {
        isValid = false;
      }

      // Validate title
      if (!document.getElementById('title').value.trim()) {
        isValid = false;
      }

      // Validate crane selection
      if (!document.getElementById('craneId').value) {
        isValid = false;
      }

      // Validate shift table has at least one selection
      if (shiftTableContainer.style.display === 'none') {
        shiftTableError.textContent = 'Please select start and end dates to generate shifts';
        isValid = false;
      } else {
        // Check if at least one shift is selected
        const selectedShifts = document.querySelectorAll('.shift-checkbox:checked');
        if (selectedShifts.length === 0) {
          shiftTableError.textContent = 'Please select at least one shift';
          isValid = false;
        }
      }

      // Validate description
      if (!document.getElementById('description').value.trim()) {
        isValid = false;
      }

      return isValid;
    }

    // Log form data for debugging
    function logFormData(formData) {
      console.log('Submitting maintenance schedule with data:', JSON.stringify(formData, null, 2));
    }

    // Submit maintenance schedule
    async function submitMaintenanceSchedule(formData) {
      // Log form data for debugging
      logFormData(formData);

      try {
        const response = await fetch('/api/MaintenanceSchedules', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        if (!response.ok) {
          // Handle error responses from the server
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to create maintenance schedule');
        }

        // Show success modal
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));
        successModal.show();

        // Reset form after successful submission
        document.getElementById('craneMaintenanceForm').reset();
        shiftTableContainer.style.display = 'none';
      } catch (error) {
        console.error('Error submitting maintenance schedule:', error);

        // Show error modal
        const errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
        document.getElementById('errorModalBody').textContent =
          error.message || 'An error occurred while submitting your maintenance schedule.';
        errorModal.show();
      }
    }

    // Submit button click handler
    submitButton.addEventListener('click', function () {
      if (validateForm()) {
        const formData = collectFormData();
        submitMaintenanceSchedule(formData);
      } else {
        // Scroll to the first error message
        const firstError = document.querySelector('.text-danger:not(:empty)');
        if (firstError) {
          firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
    });
  </script>
}
