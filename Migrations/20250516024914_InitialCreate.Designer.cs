// <auto-generated />
using System;
using AspnetCoreMvcFull.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspnetCoreMvcFull.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516024914_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedAtByPIC")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApprovedByPIC")
                        .HasColumnType("text");

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CancelledBy")
                        .HasColumnType("integer");

                    b.Property<string>("CancelledByName")
                        .HasColumnType("text");

                    b.Property<string>("CancelledReason")
                        .HasColumnType("text");

                    b.Property<string>("CostCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomHazard")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime?>("DoneAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoneByPIC")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("ManagerApprovalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ManagerName")
                        .HasColumnType("text");

                    b.Property<string>("ManagerRejectReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PICRejectReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProjectSupervisor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RevisionCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingHazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<int>("HazardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("HazardId");

                    b.ToTable("BookingHazards");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingItems");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("interval");

                    b.Property<string>("ShiftName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ShiftDefinitionId");

                    b.ToTable("BookingShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Breakdown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualUrgentEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<string>("HangfireJobId")
                        .HasColumnType("text");

                    b.Property<string>("Reasons")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UrgentEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UrgentStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("Breakdowns");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Crane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cranes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 250,
                            Code = "LC008",
                            Ownership = "KPC",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 150,
                            Code = "LC009",
                            Ownership = "KPC",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 100,
                            Code = "LC010",
                            Ownership = "KPC",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 150,
                            Code = "LC011",
                            Ownership = "KPC",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 35,
                            Code = "LC012",
                            Ownership = "KPC",
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 15,
                            Code = "LC013",
                            Ownership = "KPC",
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CraneUsageRecordId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int?>("MaintenanceScheduleId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OperatorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("UsageSubcategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CraneUsageRecordId");

                    b.HasIndex("MaintenanceScheduleId");

                    b.HasIndex("UsageSubcategoryId");

                    b.ToTable("CraneUsageEntries");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("CraneUsageRecords");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Hazard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Hazards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Listrik Tegangan Tinggi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kondisi Tanah"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bekerja di Dekat Bangunan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bekerja di Dekat Area Mining"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bekerja di Dekat Air"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CraneId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CraneId");

                    b.ToTable("MaintenanceSchedules");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceScheduleShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaintenanceScheduleId")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("ShiftEndTime")
                        .HasColumnType("interval");

                    b.Property<string>("ShiftName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("ShiftStartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceScheduleId");

                    b.HasIndex("ShiftDefinitionId");

                    b.ToTable("MaintenanceScheduleShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Role.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LdapUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LdapUser", "RoleName")
                        .IsUnique();

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "system",
                            LdapUser = "PIC1",
                            Notes = "Default admin user created by seeder",
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "system",
                            LdapUser = "PIC1",
                            Notes = "Default admin user created by seeder",
                            RoleName = "pic"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.ShiftDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ShiftDefinitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            IsActive = true,
                            Name = "Shift 1",
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            IsActive = true,
                            Name = "Shift 2",
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 7, 0, 0, 0),
                            IsActive = true,
                            Name = "Shift 3",
                            StartTime = new TimeSpan(0, 0, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.UsageSubcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UsageSubcategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Operating",
                            Description = "Crane used for production lifting operations",
                            IsActive = true,
                            Name = "Pengangkatan"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Operating",
                            Description = "Crane used for equipment installation",
                            IsActive = true,
                            Name = "Menggantung Beban"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Delay",
                            Description = "Delay due to bad weather conditions",
                            IsActive = true,
                            Name = "Traveling"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Delay",
                            Description = "Delay due to bad weather conditions",
                            IsActive = true,
                            Name = "Prestart Check"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Delay",
                            Description = "Delay due to planning or coordination issues",
                            IsActive = true,
                            Name = "Menunggu User"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Delay",
                            Description = "Scheduled operator break time",
                            IsActive = true,
                            Name = "Menunggu Kesiapan Pengangkatan"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Delay",
                            Description = "Delay for refueling operations",
                            IsActive = true,
                            Name = "Menunggu Pengawalan"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Delay",
                            Description = "Delay for refueling operations",
                            IsActive = true,
                            Name = "Fueling"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Delay",
                            Description = "Delay for refueling operations",
                            IsActive = true,
                            Name = "Cuaca"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Standby",
                            Description = "Crane on standby at work site",
                            IsActive = true,
                            Name = "Tidak ada Operator"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Standby",
                            Description = "Crane available but not assigned any tasks",
                            IsActive = true,
                            Name = "Tidak diperlukan"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Standby",
                            Description = "Planned standby period",
                            IsActive = true,
                            Name = "Tidak ada pengawal"
                        },
                        new
                        {
                            Id = 22,
                            Category = "Standby",
                            Description = "Planned standby period",
                            IsActive = true,
                            Name = "Istirahat"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Standby",
                            Description = "Planned standby period",
                            IsActive = true,
                            Name = "Ganti Shift"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Standby",
                            Description = "Planned standby period",
                            IsActive = true,
                            Name = "Tidak Bisa Lewat"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Service",
                            Description = "Regular scheduled maintenance",
                            IsActive = true,
                            Name = "Servis Rutin Terjadwal"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Breakdown",
                            Description = "Breakdown due to mechanical problems",
                            IsActive = true,
                            Name = "Rusak"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Breakdown",
                            Description = "Breakdown due to electrical problems",
                            IsActive = true,
                            Name = "Perbaikan"
                        });
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingHazard", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingHazards")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingItem", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.BookingShift", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany("BookingShifts")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.ShiftDefinition", "ShiftDefinition")
                        .WithMany("BookingShifts")
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("ShiftDefinition");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Breakdown", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany("Breakdowns")
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageEntry", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AspnetCoreMvcFull.Models.CraneUsageRecord", "CraneUsageRecord")
                        .WithMany("Entries")
                        .HasForeignKey("CraneUsageRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.MaintenanceSchedule", "MaintenanceSchedule")
                        .WithMany()
                        .HasForeignKey("MaintenanceScheduleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AspnetCoreMvcFull.Models.UsageSubcategory", "UsageSubcategory")
                        .WithMany()
                        .HasForeignKey("UsageSubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CraneUsageRecord");

                    b.Navigation("MaintenanceSchedule");

                    b.Navigation("UsageSubcategory");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageRecord", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.Crane", "Crane")
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crane");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceScheduleShift", b =>
                {
                    b.HasOne("AspnetCoreMvcFull.Models.MaintenanceSchedule", "MaintenanceSchedule")
                        .WithMany("MaintenanceScheduleShifts")
                        .HasForeignKey("MaintenanceScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspnetCoreMvcFull.Models.ShiftDefinition", "ShiftDefinition")
                        .WithMany()
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaintenanceSchedule");

                    b.Navigation("ShiftDefinition");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Booking", b =>
                {
                    b.Navigation("BookingHazards");

                    b.Navigation("BookingItems");

                    b.Navigation("BookingShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.Crane", b =>
                {
                    b.Navigation("Breakdowns");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.CraneUsageRecord", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.MaintenanceSchedule", b =>
                {
                    b.Navigation("MaintenanceScheduleShifts");
                });

            modelBuilder.Entity("AspnetCoreMvcFull.Models.ShiftDefinition", b =>
                {
                    b.Navigation("BookingShifts");
                });
#pragma warning restore 612, 618
        }
    }
}
